#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ö–†–ò–ü–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
–ü—Ä–æ–±–ª–µ–º–∞: ImportError: failed to find libmagic. Check your installation

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-07-10
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def log(message: str, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–°
    import platform
    os_name = platform.system()
    log(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_version = sys.version
    log(f"–í–µ—Ä—Å–∏—è Python: {python_version}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ libmagic
    try:
        import magic
        log("‚úÖ python-magic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError as e:
        log(f"‚ùå python-magic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False

def install_libmagic_ubuntu():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ Ubuntu/Debian"""
    log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ Ubuntu/Debian...")
    
    commands = [
        "apt-get update",
        "apt-get install -y libmagic1 libmagic-dev",
        "apt-get clean"
    ]
    
    for cmd in commands:
        try:
            subprocess.run(cmd, shell=True, check=True)
            log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        except subprocess.CalledProcessError as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {cmd}: {e}", "ERROR")
            return False
    
    return True

def install_libmagic_centos():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ CentOS/RHEL"""
    log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ CentOS/RHEL...")
    
    commands = [
        "yum update -y",
        "yum install -y file-devel",
        "yum clean all"
    ]
    
    for cmd in commands:
        try:
            subprocess.run(cmd, shell=True, check=True)
            log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        except subprocess.CalledProcessError as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {cmd}: {e}", "ERROR")
            return False
    
    return True

def install_libmagic_alpine():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ Alpine"""
    log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ libmagic –Ω–∞ Alpine...")
    
    commands = [
        "apk update",
        "apk add file-dev",
        "apk cache clean"
    ]
    
    for cmd in commands:
        try:
            subprocess.run(cmd, shell=True, check=True)
            log(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {cmd}")
        except subprocess.CalledProcessError as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {cmd}: {e}", "ERROR")
            return False
    
    return True

def install_python_magic():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ python-magic"""
    log("üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ python-magic...")
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "python-magic"], check=True)
        log("‚úÖ python-magic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ python-magic: {e}", "ERROR")
        return False

def create_alternative_file_handler():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_handler_path = Path("backend/app/utils/file_handler.py")
    alternative_path = Path("backend/app/utils/file_handler_alternative.py")
    
    if not file_handler_path.exists():
        log("‚ùå –§–∞–π–ª file_handler.py –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        return False
    
    if alternative_path.exists():
        log("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
    alternative_content = '''"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç python-magic
"""

import os
import uuid
import hashlib
import mimetypes
from typing import Optional, Dict, Any, Tuple
from pathlib import Path
from datetime import datetime
import logging
from PIL import Image
import io

from ..utils.logger import get_logger
from ..utils.error_handler import api_error_handler
from ..schemas.responses import create_error_response, create_success_response

logger = get_logger("file_handler")

class FileValidationError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    def __init__(self, message: str, error_code: str = "FILE_VALIDATION_ERROR"):
        self.message = message
        self.error_code = error_code
        super().__init__(self.message)

class FileProcessingError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    def __init__(self, message: str, error_code: str = "FILE_PROCESSING_ERROR"):
        self.message = message
        self.error_code = error_code
        super().__init__(self.message)

class FileHandler:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ python-magic"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    FILE_CONFIGS = {
        'avatar': {
            'allowed_types': ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],
            'max_size': 5 * 1024 * 1024,  # 5MB
            'max_dimensions': (1024, 1024),
            'directory': 'avatars',
            'compress': True
        },
        'license': {
            'allowed_types': ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'],
            'max_size': 10 * 1024 * 1024,  # 10MB
            'max_dimensions': (2048, 2048),
            'directory': 'licenses',
            'compress': True
        },
        'car': {
            'allowed_types': ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'],
            'max_size': 8 * 1024 * 1024,  # 8MB
            'max_dimensions': (2048, 2048),
            'directory': 'cars',
            'compress': True
        },
        'document': {
            'allowed_types': ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
            'max_size': 15 * 1024 * 1024,  # 15MB
            'max_dimensions': None,
            'directory': 'documents',
            'compress': False
        }
    }
    
    def __init__(self, upload_dir: str):
        self.upload_dir = upload_dir
        self._ensure_directories()
    
    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        for config in self.FILE_CONFIGS.values():
            dir_path = Path(self.upload_dir) / config['directory']
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def _detect_mime_type(self, file_data: bytes, filename: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME —Ç–∏–ø —Ñ–∞–π–ª–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è python-magic
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        file_extension = Path(filename).suffix.lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –Ω–∞ MIME —Ç–∏–ø—ã
        extension_mime_map = {
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.png': 'image/png',
            '.webp': 'image/webp',
            '.pdf': 'application/pdf',
            '.doc': 'application/msword',
            '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        }
        
        if file_extension in extension_mime_map:
            return extension_mime_map[file_extension]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º
        if len(file_data) >= 4:
            # JPEG
            if file_data[:2] == b'\\xff\\xd8':
                return 'image/jpeg'
            # PNG
            if file_data[:8] == b'\\x89PNG\\r\\n\\x1a\\n':
                return 'image/png'
            # WebP
            if file_data[:4] == b'RIFF' and file_data[8:12] == b'WEBP':
                return 'image/webp'
            # PDF
            if file_data[:4] == b'%PDF':
                return 'application/pdf'
        
        # Fallback –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —á–µ—Ä–µ–∑ mimetypes
        mime_type, _ = mimetypes.guess_type(filename)
        return mime_type or 'application/octet-stream'
    
    def validate_file(self, file_data: bytes, filename: str, file_type: str) -> Dict[str, Any]:
        """
        –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if file_type not in self.FILE_CONFIGS:
                raise FileValidationError(
                    f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_type}",
                    "INVALID_FILE_TYPE"
                )
            
            config = self.FILE_CONFIGS[file_type]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type = self._detect_mime_type(file_data, filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
            if mime_type not in config['allowed_types']:
                raise FileValidationError(
                    f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø: {mime_type}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(config['allowed_types'])}",
                    "INVALID_MIME_TYPE"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = len(file_data)
            if file_size > config['max_size']:
                max_size_mb = config['max_size'] / (1024 * 1024)
                raise FileValidationError(
                    f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ({file_size / (1024 * 1024):.1f}MB) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π ({max_size_mb}MB)",
                    "FILE_TOO_LARGE"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤)
            if file_size < 100:  # –ú–∏–Ω–∏–º—É–º 100 –±–∞–π—Ç
                raise FileValidationError(
                    "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω",
                    "FILE_TOO_SMALL"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã
            if mime_type.startswith('image/') and config['max_dimensions']:
                try:
                    image = Image.open(io.BytesIO(file_data))
                    width, height = image.size
                    max_width, max_height = config['max_dimensions']
                    
                    if width > max_width or height > max_height:
                        raise FileValidationError(
                            f"–†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({width}x{height}) –ø—Ä–µ–≤—ã—à–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ ({max_width}x{max_height})",
                            "IMAGE_TOO_LARGE"
                        )
                        
                except Exception as e:
                    if "cannot identify image file" in str(e).lower():
                        raise FileValidationError(
                            "–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
                            "INVALID_IMAGE"
                        )
                    raise FileValidationError(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
                        "IMAGE_PROCESSING_ERROR"
                    )
            
            return {
                'mime_type': mime_type,
                'file_size': file_size,
                'filename': filename,
                'file_type': file_type,
                'is_image': mime_type.startswith('image/'),
                'config': config
            }
            
        except FileValidationError:
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise FileValidationError(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "VALIDATION_ERROR"
            )
    
    def process_file(self, file_data: bytes, filename: str, file_type: str, user_id: int) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            validation_info = self.validate_file(file_data, filename, file_type)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = Path(filename).suffix
            unique_filename = f"{uuid.uuid4()}{file_extension}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            config = validation_info['config']
            save_dir = Path(self.upload_dir) / config['directory']
            save_path = save_dir / unique_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(save_path, 'wb') as f:
                f.write(file_data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
            file_hash = hashlib.md5(file_data).hexdigest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL
            file_url = f"/uploads/{config['directory']}/{unique_filename}"
            
            return {
                'file_url': file_url,
                'filename': unique_filename,
                'original_filename': filename,
                'file_size': len(file_data),
                'mime_type': validation_info['mime_type'],
                'file_hash': file_hash,
                'user_id': user_id,
                'uploaded_at': datetime.utcnow().isoformat(),
                'file_type': file_type
            }
            
        except FileValidationError:
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise FileProcessingError(
                f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}",
                "SAVE_ERROR"
            )

def get_file_handler(upload_dir: str) -> FileHandler:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    """
    return FileHandler(upload_dir)
'''
    
    try:
        with open(alternative_path, 'w', encoding='utf-8') as f:
            f.write(alternative_content)
        log("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω")
        return True
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}", "ERROR")
        return False

def update_imports():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç file_handler
    files_to_update = [
        "backend/app/api/upload.py"
    ]
    
    for file_path in files_to_update:
        if not Path(file_path).exists():
            log(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
            old_import = "from ..utils.file_handler import get_file_handler, FileValidationError, FileProcessingError"
            new_import = "from ..utils.file_handler_alternative import get_file_handler, FileValidationError, FileProcessingError"
            
            if old_import in content:
                content = content.replace(old_import, new_import)
                
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                log(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ {file_path}")
            else:
                log(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_path}")
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}", "ERROR")

def test_application():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        import sys
        sys.path.append('backend')
        
        from app.main import app
        log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        from fastapi.testclient import TestClient
        client = TestClient(app)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        response = client.get("/health")
        if response.status_code == 200:
            log("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            log(f"‚ö†Ô∏è Health check –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    log("üö® –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
    log("=" * 50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    if check_system():
        log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
    
    # –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ libmagic
    import platform
    os_name = platform.system().lower()
    
    if os_name in ['linux', 'darwin']:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux
        try:
            with open('/etc/os-release', 'r') as f:
                os_info = f.read().lower()
            
            if 'ubuntu' in os_info or 'debian' in os_info:
                install_libmagic_ubuntu()
            elif 'centos' in os_info or 'rhel' in os_info or 'redhat' in os_info:
                install_libmagic_centos()
            elif 'alpine' in os_info:
                install_libmagic_alpine()
            else:
                log("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux")
        except FileNotFoundError:
            log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux")
    
    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ python-magic
    install_python_magic()
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    create_alternative_file_handler()
    
    # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    update_imports()
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_application()
    
    log("=" * 50)
    log("üéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    log("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    log("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
    log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    log("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
    log("4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")

if __name__ == "__main__":
    main() 