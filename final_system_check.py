#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä—É
"""

import requests
import json
import subprocess
import sys
import time
from datetime import datetime

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    emoji = {
        "INFO": "‚ÑπÔ∏è",
        "SUCCESS": "‚úÖ",
        "ERROR": "‚ùå",
        "WARNING": "‚ö†Ô∏è",
        "CRITICAL": "üö®"
    }
    print(f"[{timestamp}] {emoji.get(level, '‚ÑπÔ∏è')} {message}")

def check_backend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞...", "INFO")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        response = requests.get("https://pax-backend-2gng.onrender.com/", timeout=10)
        if response.status_code == 200:
            log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", "SUCCESS")
        else:
            log(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
        response = requests.get("https://pax-backend-2gng.onrender.com/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ Health check: {data}", "SUCCESS")
            
            if data.get("database") == "connected":
                log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", "SUCCESS")
            else:
                log("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞", "ERROR")
                return False
        else:
            log(f"‚ùå Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API info
        response = requests.get("https://pax-backend-2gng.onrender.com/api/info", timeout=10)
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ API info: {data.get('name')} v{data.get('version')}", "SUCCESS")
        else:
            log(f"‚ùå API info –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞: {e}", "ERROR")
        return False

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...", "INFO")
    
    try:
        response = requests.get("https://frabjous-florentine-c506b0.netlify.app", timeout=10)
        if response.status_code == 200:
            log("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω", "SUCCESS")
            return True
        else:
            log(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}", "ERROR")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...", "INFO")
    
    try:
        bot_token = "8187393599:AAEudOluahmhNJixt_hW8mvWjWC0eh1YIlA"
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                bot_info = data["result"]
                log(f"‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info['username']}", "SUCCESS")
                return True
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {data}", "ERROR")
                return False
        else:
            log(f"‚ùå Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {e}", "ERROR")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "INFO")
    
    try:
        import psycopg2
        from urllib.parse import urlparse
        
        db_url = "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a.oregon-postgres.render.com/paxmain"
        parsed = urlparse(db_url)
        
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port or 5432,
            database=parsed.path[1:],
            user=parsed.username,
            password=parsed.password,
            connect_timeout=10
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
        return False

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...", "INFO")
    
    endpoints = [
        "/api/auth/telegram/verify",
        "/api/rides/search",
        "/api/profile/me",
        "/api/notifications/settings",
        "/api/rating/stats"
    ]
    
    base_url = "https://pax-backend-2gng.onrender.com"
    working_endpoints = 0
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            if response.status_code in [200, 401, 403]:  # 401/403 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                log(f"‚úÖ {endpoint} - {response.status_code}", "SUCCESS")
                working_endpoints += 1
            else:
                log(f"‚ùå {endpoint} - {response.status_code}", "ERROR")
        except Exception as e:
            log(f"‚ùå {endpoint} - –æ—à–∏–±–∫–∞: {str(e)[:50]}", "ERROR")
    
    log(f"üìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {working_endpoints}/{len(endpoints)}", "INFO")
    return working_endpoints >= len(endpoints) * 0.8  # 80% –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å

def check_telegram_webapp():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Web App"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Web App...", "INFO")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å Telegram Web App
        headers = {
            'User-Agent': 'TelegramWebApp/1.0',
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        response = requests.get("https://frabjous-florentine-c506b0.netlify.app", 
                              headers=headers, timeout=10)
        
        if response.status_code == 200:
            log("‚úÖ Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω", "SUCCESS")
            return True
        else:
            log(f"‚ùå Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram Web App: {e}", "ERROR")
        return False

def check_performance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...", "INFO")
    
    try:
        start_time = time.time()
        response = requests.get("https://pax-backend-2gng.onrender.com/health", timeout=10)
        end_time = time.time()
        
        response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        if response_time < 2000:  # –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
            log(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.0f}ms", "SUCCESS")
            return True
        elif response_time < 5000:  # –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
            log(f"‚ö†Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.0f}ms (–º–µ–¥–ª–µ–Ω–Ω–æ)", "WARNING")
            return True
        else:
            log(f"‚ùå –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {response_time:.0f}ms (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}", "ERROR")
        return False

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...", "INFO")
    
    report = {
        "timestamp": datetime.now().isoformat(),
        "system_status": "READY",
        "components": {
            "backend": False,
            "frontend": False,
            "database": False,
            "telegram_bot": False,
            "api_endpoints": False,
            "telegram_webapp": False,
            "performance": False
        },
        "recommendations": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    report["components"]["backend"] = check_backend()
    report["components"]["frontend"] = check_frontend()
    report["components"]["database"] = check_database()
    report["components"]["telegram_bot"] = check_telegram_bot()
    report["components"]["api_endpoints"] = check_api_endpoints()
    report["components"]["telegram_webapp"] = check_telegram_webapp()
    report["components"]["performance"] = check_performance()
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    working_components = sum(report["components"].values())
    total_components = len(report["components"])
    
    if working_components == total_components:
        report["system_status"] = "FULLY_OPERATIONAL"
        log("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢!", "SUCCESS")
    elif working_components >= total_components * 0.8:
        report["system_status"] = "MOSTLY_OPERATIONAL"
        log("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç", "SUCCESS")
    else:
        report["system_status"] = "PARTIALLY_OPERATIONAL"
        log("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π", "WARNING")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not report["components"]["backend"]:
        report["recommendations"].append("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥ –Ω–∞ Render")
    if not report["components"]["database"]:
        report["recommendations"].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    if not report["components"]["telegram_bot"]:
        report["recommendations"].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
    if not report["components"]["performance"]:
        report["recommendations"].append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", "INFO")
    log("=" * 60, "INFO")
    
    report = generate_report()
    
    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    log("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢", "INFO")
    log("-" * 40, "INFO")
    
    for component, status in report["components"].items():
        status_text = "–†–ê–ë–û–¢–ê–ï–¢" if status else "–ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        emoji = "‚úÖ" if status else "‚ùå"
        log(f"{emoji} {component.upper()}: {status_text}", "INFO")
    
    log(f"\nüìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {report['system_status']}", "INFO")
    
    if report["recommendations"]:
        log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", "INFO")
        for rec in report["recommendations"]:
            log(f"   ‚Ä¢ {rec}", "WARNING")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    working_components = sum(report["components"].values())
    total_components = len(report["components"])
    
    if working_components == total_components:
        log("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò –ò–ù–í–ï–°–¢–û–†–£!", "SUCCESS")
        log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "SUCCESS")
        log("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ", "SUCCESS")
        log("‚úÖ Telegram Mini App —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç", "SUCCESS")
        return True
    elif working_components >= total_components * 0.8:
        log("\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò", "SUCCESS")
        log("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", "WARNING")
        return True
    else:
        log("\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò", "ERROR")
        log("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "ERROR")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 