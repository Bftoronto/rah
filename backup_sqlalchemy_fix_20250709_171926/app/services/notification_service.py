import asyncio
import aiohttp
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from sqlalchemy.orm import Session
from ..models.user import User
from ..models.notification import NotificationLog, NotificationSettings
from ..config.settings import settings

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self):
        self.bot_token = settings.telegram_bot_token
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.session = None
    
    async def get_session(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
    
    def log_notification(self, db: Session, user_id: int, notification_type: str, 
                        title: Optional[str] = None, message: Optional[str] = None,
                        success: bool = False, error_message: Optional[str] = None,
                        telegram_response: Optional[Dict] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            log_entry = NotificationLog(
                user_id=user_id,
                notification_type=notification_type,
                title=title,
                message=message,
                success=success,
                error_message=error_message,
                telegram_response=telegram_response
            )
            db.add(log_entry)
            db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            db.rollback()
    
    def check_notification_settings(self, db: Session, user_id: int, 
                                  notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            settings = db.query(NotificationSettings).filter(
                NotificationSettings.user_id == user_id
            ).first()
            
            if not settings:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings = NotificationSettings(user_id=user_id)
                db.add(settings)
                db.commit()
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notification_type.startswith("ride_"):
                return settings.ride_notifications
            elif notification_type in ["info", "success", "warning", "error", "security"]:
                return settings.system_notifications
            elif notification_type == "reminder":
                return settings.reminder_notifications
            elif notification_type == "marketing":
                return settings.marketing_notifications
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
    
    def is_quiet_hours(self, db: Session, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤"""
        try:
            settings = db.query(NotificationSettings).filter(
                NotificationSettings.user_id == user_id
            ).first()
            
            if not settings or not settings.quiet_hours_start or not settings.quiet_hours_end:
                return False
            
            now = datetime.now().time()
            start_time = datetime.strptime(settings.quiet_hours_start, "%H:%M").time()
            end_time = datetime.strptime(settings.quiet_hours_end, "%H:%M").time()
            
            if start_time <= end_time:
                return start_time <= now <= end_time
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                return now >= start_time or now <= end_time
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤: {str(e)}")
            return False
    
    async def send_telegram_message(self, chat_id: str, text: str, 
                                  parse_mode: str = "HTML", 
                                  reply_markup: Optional[Dict] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            session = await self.get_session()
            
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            async with session.post(f"{self.base_url}/sendMessage", json=payload) as response:
                result = await response.json()
                
                if response.status == 200 and result.get("ok"):
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    return {
                        "success": True,
                        "response": result
                    }
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {result}")
                    return {
                        "success": False,
                        "error": result.get("description", "Unknown error"),
                        "response": result
                    }
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }
    
    async def send_ride_notification(self, user: User, ride_data: Dict, 
                                   notification_type: str, db: Session) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–µ–∑–¥–∫–∞—Ö"""
        try:
            if not user.telegram_id:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –∏–º–µ–µ—Ç Telegram ID")
                self.log_notification(db, user.id, notification_type, 
                                   success=False, error_message="No Telegram ID")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not self.check_notification_settings(db, user.id, notification_type):
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if self.is_quiet_hours(db, user.id):
                logger.info(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
            
            # –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            templates = {
                "new_ride": {
                    "title": "üöó –ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞",
                    "text": f"""
<b>–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É!</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {ride_data.get('from', '')} ‚Üí {ride_data.get('to', '')}
üìÖ <b>–î–∞—Ç–∞:</b> {ride_data.get('date', '')}
üïê <b>–í—Ä–µ–º—è:</b> {ride_data.get('time', '')}
üí∞ <b>–¶–µ–Ω–∞:</b> {ride_data.get('price', '')} ‚ÇΩ
üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {ride_data.get('driver_name', '')}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {ride_data.get('driver_rating', '0')}
                    """.strip(),
                    "button": {"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–µ–∑–¥–∫—É", "callback_data": f"view_ride_{ride_data.get('id')}"}
                },
                "ride_reminder": {
                    "title": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ",
                    "text": f"""
<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {ride_data.get('from', '')} ‚Üí {ride_data.get('to', '')}
üìÖ <b>–î–∞—Ç–∞:</b> {ride_data.get('date', '')}
üïê <b>–í—Ä–µ–º—è:</b> {ride_data.get('time', '')}
üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {ride_data.get('car_info', '')}
üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {ride_data.get('driver_name', '')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {ride_data.get('driver_phone', '')}
                    """.strip(),
                    "button": {"text": "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", "callback_data": f"open_chat_{ride_data.get('id')}"}
                },
                "ride_cancelled": {
                    "title": "‚ùå –ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    "text": f"""
<b>–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {ride_data.get('from', '')} ‚Üí {ride_data.get('to', '')}
üìÖ <b>–î–∞—Ç–∞:</b> {ride_data.get('date', '')}
üïê <b>–í—Ä–µ–º—è:</b> {ride_data.get('time', '')}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {ride_data.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
                    """.strip(),
                    "button": {"text": "–ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –ø–æ–µ–∑–¥–∫—É", "callback_data": "find_ride"}
                },
                "booking_confirmed": {
                    "title": "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
                    "text": f"""
<b>–í–∞—à–µ –º–µ—Å—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {ride_data.get('from', '')} ‚Üí {ride_data.get('to', '')}
üìÖ <b>–î–∞—Ç–∞:</b> {ride_data.get('date', '')}
üïê <b>–í—Ä–µ–º—è:</b> {ride_data.get('time', '')}
üí∞ <b>–¶–µ–Ω–∞:</b> {ride_data.get('price', '')} ‚ÇΩ
üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {ride_data.get('driver_name', '')}
                    """.strip(),
                    "button": {"text": "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", "callback_data": f"open_chat_{ride_data.get('id')}"}
                },
                "new_passenger": {
                    "title": "üë§ –ù–æ–≤—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä",
                    "text": f"""
<b>–ù–æ–≤—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –º–µ—Å—Ç–æ</b>

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> {ride_data.get('from', '')} ‚Üí {ride_data.get('to', '')}
üìÖ <b>–î–∞—Ç–∞:</b> {ride_data.get('date', '')}
üïê <b>–í—Ä–µ–º—è:</b> {ride_data.get('time', '')}
üë§ <b>–ü–∞—Å—Å–∞–∂–∏—Ä:</b> {ride_data.get('passenger_name', '')}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {ride_data.get('passenger_phone', '')}
                    """.strip(),
                    "button": {"text": "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", "callback_data": f"open_chat_{ride_data.get('id')}"}
                }
            }
            
            template = templates.get(notification_type)
            if not template:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
                self.log_notification(db, user.id, notification_type, 
                                   success=False, error_message=f"Unknown type: {notification_type}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = None
            if template.get("button"):
                reply_markup = {
                    "inline_keyboard": [[template["button"]]]
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            result = await self.send_telegram_message(
                chat_id=user.telegram_id,
                text=template["text"],
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.log_notification(
                db=db,
                user_id=user.id,
                notification_type=notification_type,
                title=template["title"],
                message=template["text"],
                success=result["success"],
                error_message=result.get("error"),
                telegram_response=result.get("response")
            )
            
            return result["success"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–µ–∑–¥–∫–µ: {str(e)}")
            self.log_notification(db, user.id, notification_type, 
                               success=False, error_message=str(e))
            return False
    
    async def send_system_notification(self, user: User, title: str, 
                                     message: str, notification_type: str = "info",
                                     db: Session = None) -> bool:
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not user.telegram_id:
                if db:
                    self.log_notification(db, user.id, notification_type, 
                                       success=False, error_message="No Telegram ID")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if db and not self.check_notification_settings(db, user.id, notification_type):
                logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if db and self.is_quiet_hours(db, user.id):
                logger.info(f"–¢–∏—Ö–∏–µ —á–∞—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                return True
            
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            icons = {
                "info": "‚ÑπÔ∏è",
                "success": "‚úÖ",
                "warning": "‚ö†Ô∏è",
                "error": "‚ùå",
                "security": "üîí"
            }
            
            icon = icons.get(notification_type, "‚ÑπÔ∏è")
            
            text = f"""
<b>{icon} {title}</b>

{message}
            """.strip()
            
            result = await self.send_telegram_message(
                chat_id=user.telegram_id,
                text=text
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if db:
                self.log_notification(
                    db=db,
                    user_id=user.id,
                    notification_type=notification_type,
                    title=title,
                    message=message,
                    success=result["success"],
                    error_message=result.get("error"),
                    telegram_response=result.get("response")
                )
            
            return result["success"]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            if db:
                self.log_notification(db, user.id, notification_type, 
                                   success=False, error_message=str(e))
            return False
    
    async def send_reminder_notifications(self, db: Session) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–µ–∑–¥–∫–∞—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å
            from ..models.ride import Ride, Booking
            from sqlalchemy import and_
            
            reminder_time = datetime.now() + timedelta(hours=1)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ —á–∞—Å
            rides = db.query(Ride).filter(
                and_(
                    Ride.date == reminder_time.date(),
                    Ride.time == reminder_time.strftime("%H:%M"),
                    Ride.is_active == True
                )
            ).all()
            
            for ride in rides:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
                if ride.driver:
                    await self.send_ride_notification(
                        user=ride.driver,
                        ride_data={
                            "id": ride.id,
                            "from": ride.from_location,
                            "to": ride.to_location,
                            "date": ride.date.strftime("%d.%m.%Y"),
                            "time": ride.time,
                            "car_info": f"{ride.driver.car_brand} {ride.driver.car_model}",
                            "driver_name": ride.driver.full_name,
                            "driver_phone": ride.driver.phone
                        },
                        notification_type="ride_reminder",
                        db=db
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
                bookings = db.query(Booking).filter(
                    and_(
                        Booking.ride_id == ride.id,
                        Booking.status == "confirmed"
                    )
                ).all()
                
                for booking in bookings:
                    await self.send_ride_notification(
                        user=booking.passenger,
                        ride_data={
                            "id": ride.id,
                            "from": ride.from_location,
                            "to": ride.to_location,
                            "date": ride.date.strftime("%d.%m.%Y"),
                            "time": ride.time,
                            "car_info": f"{ride.driver.car_brand} {ride.driver.car_model}",
                            "driver_name": ride.driver.full_name,
                            "driver_phone": ride.driver.phone
                        },
                        notification_type="ride_reminder",
                        db=db
                    )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(rides)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–µ–∑–¥–∫–∞—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")
    
    async def send_bulk_notification(self, users: List[User], title: str, 
                                   message: str, notification_type: str = "info",
                                   db: Session = None) -> Dict[str, int]:
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        results = {"success": 0, "failed": 0}
        
        for user in users:
            try:
                success = await self.send_system_notification(
                    user=user,
                    title=title,
                    message=message,
                    notification_type=notification_type,
                    db=db
                )
                
                if success:
                    results["success"] += 1
                else:
                    results["failed"] += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {str(e)}")
                results["failed"] += 1
        
        logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['success']} —É—Å–ø–µ—à–Ω–æ, {results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
        return results

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService() 