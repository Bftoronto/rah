#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram Mini App
"""

import requests
import json
import time
from datetime import datetime

# URL'—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LOCAL_BACKEND = "http://localhost:8000"
PRODUCTION_BACKEND = "https://pax-backend-2gng.onrender.com"

def test_backend_connectivity(url, name):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É"""
    print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} ({url})...")
    
    try:
        # –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        response = requests.get(f"{url}/", timeout=10)
        print(f"‚úÖ {name} –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            except:
                print("   –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
        
        return True
        
    except requests.exceptions.Timeout:
        print(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
        return False
    except requests.exceptions.ConnectionError:
        print(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)")
        return False
    except Exception as e:
        print(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_telegram_verification(url, name):
    """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram"""
    print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –Ω–∞ {name}...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    test_data = {
        "user": {
            "id": 123456789,
            "first_name": "Test",
            "last_name": "User",
            "username": "testuser",
            "language_code": "ru"
        },
        "auth_date": int(time.time()),
        "hash": "test_hash_for_development"
    }
    
    try:
        response = requests.post(
            f"{url}/api/auth/telegram/verify",
            json=test_data,
            timeout=10,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code in [200, 401, 500]:
            print(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            try:
                data = response.json()
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except:
                print("–û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
            return True
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def test_database_connection(url, name):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–∞ {name}...")
    
    try:
        response = requests.get(f"{url}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            db_status = data.get('database', 'unknown')
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}")
            return db_status == 'connected'
        else:
            print(f"‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def generate_test_telegram_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram"""
    print("\nüì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Telegram Web App
    test_data = {
        "user": {
            "id": 123456789,
            "first_name": "Test",
            "last_name": "User",
            "username": "testuser",
            "language_code": "ru",
            "photo_url": "https://t.me/i/userpic/320/testuser.jpg"
        },
        "chat": {
            "id": -1001234567890,
            "type": "private",
            "title": "Test Chat"
        },
        "auth_date": int(time.time()),
        "hash": "test_hash_for_development_mode",
        "start_param": "test_start_param"
    }
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    print(json.dumps(test_data, indent=2, ensure_ascii=False))
    
    return test_data

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM MINI APP –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥–∞–º
    local_ok = test_backend_connectivity(LOCAL_BACKEND, "–õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥")
    production_ok = test_backend_connectivity(PRODUCTION_BACKEND, "–ü—Ä–æ–¥–∞–∫—à–µ–Ω –±—ç–∫–µ–Ω–¥")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—á–∏–π –±—ç–∫–µ–Ω–¥
    if local_ok:
        backend_url = LOCAL_BACKEND
        backend_name = "–õ–æ–∫–∞–ª—å–Ω—ã–π"
        print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥: {backend_url}")
    elif production_ok:
        backend_url = PRODUCTION_BACKEND
        backend_name = "–ü—Ä–æ–¥–∞–∫—à–µ–Ω"
        print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±—ç–∫–µ–Ω–¥: {backend_url}")
    else:
        print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–µ–Ω–¥–æ–≤!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥: ./start_local_backend.sh")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = test_database_connection(backend_url, backend_name)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Telegram
    auth_ok = test_telegram_verification(backend_url, backend_name)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = generate_test_telegram_data()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    print(f"–ë—ç–∫–µ–Ω–¥: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if local_ok or production_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if db_ok else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'}")
    print(f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if auth_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if local_ok or production_ok and auth_ok:
        print("\nüéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!")
        print("\nüì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ @paxdemobot –≤ Telegram")
        print("2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'")
        print("3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–∞—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:")
        if not (local_ok or production_ok):
            print("- –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        if not db_ok:
            print("- –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        if not auth_ok:
            print("- –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π Telegram")
        
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–µ–Ω–¥: ./start_local_backend.sh")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")

if __name__ == "__main__":
    main() 