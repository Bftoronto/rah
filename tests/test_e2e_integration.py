"""
E2E —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º
"""

import pytest
import asyncio
import aiohttp
import json
import time
from typing import Dict, Any, Optional
from unittest.mock import Mock, patch
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from backend.app.main import app
from backend.app.database import get_db
from backend.app.models.user import User
from backend.app.models.ride import Ride
from backend.app.models.rating import Rating
from backend.app.schemas.user import UserCreate
from backend.app.schemas.ride import RideCreate
from backend.app.schemas.rating import RatingCreate

class E2EIntegrationTest:
    """–ö–ª–∞—Å—Å –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.test_user_data = {
            "telegram_id": "123456789",
            "username": "test_user",
            "first_name": "Test",
            "last_name": "User",
            "phone": "+79001234567",
            "email": "test@example.com"
        }
        self.test_ride_data = {
            "from_location": "–ú–æ—Å–∫–≤–∞",
            "to_location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "departure_time": "2024-01-15T10:00:00",
            "seats_available": 3,
            "price": 1500,
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞"
        }
        self.session = None
        self.access_token = None
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.session = aiohttp.ClientSession()
        
    async def teardown(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if self.session:
            await self.session.close()
    
    async def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, 
                          headers: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        
        if headers is None:
            headers = {}
        
        if self.access_token:
            headers["Authorization"] = f"Bearer {self.access_token}"
        
        headers["Content-Type"] = "application/json"
        
        try:
            if method.upper() == "GET":
                async with self.session.get(url, headers=headers) as response:
                    return await response.json()
            elif method.upper() == "POST":
                async with self.session.post(url, json=data, headers=headers) as response:
                    return await response.json()
            elif method.upper() == "PUT":
                async with self.session.put(url, json=data, headers=headers) as response:
                    return await response.json()
            elif method.upper() == "DELETE":
                async with self.session.delete(url, headers=headers) as response:
                    return await response.json()
        except Exception as e:
            return {"error": str(e)}
    
    async def test_user_registration_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # 1. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö
        telegram_data = {
            "user": {
                "id": 123456789,
                "first_name": "Test",
                "last_name": "User",
                "username": "test_user"
            },
            "auth_date": int(time.time()),
            "hash": "test_hash"
        }
        
        response = await self.make_request("POST", "/api/auth/telegram/verify", telegram_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response}"
        assert response.get("data", {}).get("exists") is False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "telegram_id": "123456789",
            "username": "test_user",
            "first_name": "Test",
            "last_name": "User",
            "phone": "+79001234567",
            "email": "test@example.com",
            "birth_date": "1990-01-01",
            "is_driver": True,
            "car_model": "Toyota Camry",
            "car_color": "–ë–µ–ª—ã–π",
            "license_plate": "–ê123–ë–í77"
        }
        
        response = await self.make_request("POST", "/api/auth/register", user_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response}"
        assert "user" in response.get("data", {}), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    
    async def test_user_login_flow(self):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
        login_data = {
            "user": {
                "id": 123456789,
                "first_name": "Test",
                "last_name": "User",
                "username": "test_user"
            },
            "auth_date": int(time.time()),
            "hash": "test_hash"
        }
        
        response = await self.make_request("POST", "/api/auth/login", login_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        data = response.get("data", {})
        self.access_token = data.get("access_token")
        assert self.access_token, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω access token"
        
        print("‚úÖ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    
    async def test_ride_creation_flow(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
        ride_data = {
            "from_location": "–ú–æ—Å–∫–≤–∞",
            "to_location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "departure_time": "2024-01-15T10:00:00",
            "seats_available": 3,
            "price": 1500,
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞"
        }
        
        response = await self.make_request("POST", "/api/rides/", ride_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏: {response}"
        
        ride_id = response.get("data", {}).get("ride", {}).get("id")
        assert ride_id, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω ID –ø–æ–µ–∑–¥–∫–∏"
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        return ride_id
    
    async def test_ride_search_flow(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫...")
        
        # –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–∫
        search_params = {
            "from_location": "–ú–æ—Å–∫–≤–∞",
            "to_location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "date": "2024-01-15"
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query string
        query_string = "&".join([f"{k}={v}" for k, v in search_params.items()])
        response = await self.make_request("GET", f"/api/rides/search?{query_string}")
        
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫: {response}"
        assert "rides" in response.get("data", {}), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫"
        
        print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–∫ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
    
    async def test_rating_flow(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating_data = {
            "target_user_id": 1,
            "ride_id": 1,
            "rating": 5,
            "comment": "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–µ–∑–¥–∫–∞ –ø—Ä–æ—à–ª–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ"
        }
        
        response = await self.make_request("POST", "/api/ratings/", rating_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {response}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await self.make_request("GET", "/api/ratings/user/1")
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {response}"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_notification_flow(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_settings = {
            "email_notifications": True,
            "push_notifications": True,
            "sms_notifications": False,
            "ride_updates": True,
            "new_messages": True,
            "rating_updates": True
        }
        
        response = await self.make_request("PUT", "/api/notifications/settings/1", notification_settings)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        response = await self.make_request("GET", "/api/notifications/settings/1")
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response}"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_chat_flow(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            "receiver_id": 2,
            "content": "–ü—Ä–∏–≤–µ—Ç! –ï—Å—Ç—å –º–µ—Å—Ç–æ –≤ –ø–æ–µ–∑–¥–∫–µ?",
            "ride_id": 1
        }
        
        response = await self.make_request("POST", "/api/chat/send", message_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        response = await self.make_request("GET", "/api/chat/history/1")
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response}"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_file_upload_flow(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file_content = b"Test file content"
        
        # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        upload_data = {
            "file_type": "avatar",
            "file_name": "test_avatar.jpg",
            "file_size": len(test_file_content),
            "file_hash": "test_hash"
        }
        
        response = await self.make_request("POST", "/api/upload/", upload_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response}"
        
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        invalid_data = {
            "invalid_field": "invalid_value"
        }
        
        response = await self.make_request("POST", "/api/auth/register", invalid_data)
        assert response.get("success") is False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        assert "error_code" in response, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏"
        
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º endpoint
        response = await self.make_request("GET", "/api/nonexistent")
        assert response.get("success") is False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 404"
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_performance_metrics(self):
        """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
        metrics_data = {
            "api_calls": 10,
            "errors": 2,
            "response_time": 150,
            "cache_hits": 8,
            "cache_misses": 2
        }
        
        response = await self.make_request("POST", "/api/monitoring/metrics", metrics_data)
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫: {response}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        response = await self.make_request("GET", "/api/monitoring/stats")
        assert response.get("success") is True, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response}"
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        await self.setup()
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
            await self.test_user_registration_flow()
            await self.test_user_login_flow()
            await self.test_ride_creation_flow()
            await self.test_ride_search_flow()
            await self.test_rating_flow()
            await self.test_notification_flow()
            await self.test_chat_flow()
            await self.test_file_upload_flow()
            await self.test_error_handling()
            await self.test_performance_metrics()
            
            print("üéâ –í—Å–µ E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ E2E —Ç–µ—Å—Ç–∞—Ö: {str(e)}")
            raise
        finally:
            await self.teardown()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async def run_e2e_tests():
    """–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤"""
    tester = E2EIntegrationTest()
    await tester.run_all_tests()

def test_e2e_integration():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è pytest"""
    asyncio.run(run_e2e_tests())

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    asyncio.run(run_e2e_tests()) 