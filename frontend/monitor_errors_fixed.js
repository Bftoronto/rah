// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
class ErrorMonitor {
    constructor() {
        this.errorCount = 0;
        this.lastErrorTime = null;
        this.errorTypes = new Map();
        this.isMonitoring = false;
    }

    start() {
        if (this.isMonitoring) return;
        
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫...');
        this.isMonitoring = true;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            this.handleError(event.error || new Error(event.message), {
                type: 'unhandled_error',
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError(event.reason, {
                type: 'unhandled_promise_rejection',
                promise: event.promise
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        window.addEventListener('error', (event) => {
            if (event.target && event.target.tagName) {
                this.handleError(new Error(`Failed to load ${event.target.tagName}: ${event.target.src || event.target.href}`), {
                    type: 'resource_load_error',
                    element: event.target.tagName,
                    src: event.target.src || event.target.href
                });
            }
        }, true);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –º–æ–¥—É–ª–µ–π
        window.addEventListener('error', (event) => {
            if (event.message && event.message.includes('import')) {
                this.handleError(event.error || new Error(event.message), {
                    type: 'module_import_error',
                    filename: event.filename
                });
            }
        });

        console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—â–µ–Ω');
    }

    handleError(error, context = {}) {
        this.errorCount++;
        this.lastErrorTime = new Date();
        
        const errorType = context.type || 'unknown';
        this.errorTypes.set(errorType, (this.errorTypes.get(errorType) || 0) + 1);
        
        const errorInfo = {
            message: error.message,
            stack: error.stack,
            type: errorType,
            context: context,
            timestamp: this.lastErrorTime.toISOString(),
            url: window.location.href,
            userAgent: navigator.userAgent
        };
        
        console.error('üö® –û—à–∏–±–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', errorInfo);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendErrorToServer(errorInfo);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showUserNotification(error);
    }

    async sendErrorToServer(errorInfo) {
        try {
            const response = await fetch('/api/monitoring/errors', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(errorInfo)
            });
            
            if (!response.ok) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', response.status);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
        }
    }

    showUserNotification(error) {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #f44336;
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        `;
        
        notification.innerHTML = `
            <div style="font-weight: bold; margin-bottom: 5px;">–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>
            <div style="font-size: 12px;">${error.message}</div>
            <button onclick="this.parentElement.remove()" style="
                position: absolute;
                top: 5px;
                right: 5px;
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 16px;
            ">√ó</button>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);
    }

    getStats() {
        return {
            totalErrors: this.errorCount,
            lastErrorTime: this.lastErrorTime,
            errorTypes: Object.fromEntries(this.errorTypes),
            isMonitoring: this.isMonitoring
        };
    }

    stop() {
        this.isMonitoring = false;
        console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
window.errorMonitor = new ErrorMonitor();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.errorMonitor.start();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { ErrorMonitor }; 