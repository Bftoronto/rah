#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ö–†–ò–ü–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø SQLALCHEMY –ò–ú–ü–û–†–¢–û–í
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import subprocess
import re
from pathlib import Path

def log(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_sqlalchemy_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ SQLAlchemy"""
    try:
        import sqlalchemy
        log(f"SQLAlchemy –≤–µ—Ä—Å–∏—è: {sqlalchemy.__version__}")
        return sqlalchemy.__version__
    except ImportError as e:
        log(f"–û–®–ò–ë–ö–ê: SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return None

def fix_sqlalchemy_imports():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ SQLAlchemy"""
    backend_dir = Path("backend/app")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã
    import_fixes = [
        # selectinload
        (r"from sqlalchemy import selectinload", "from sqlalchemy.orm import selectinload"),
        (r"from sqlalchemy import.*selectinload", "from sqlalchemy.orm import selectinload"),
        
        # joinedload
        (r"from sqlalchemy import joinedload", "from sqlalchemy.orm import joinedload"),
        (r"from sqlalchemy import.*joinedload", "from sqlalchemy.orm import joinedload"),
        
        # subqueryload
        (r"from sqlalchemy import subqueryload", "from sqlalchemy.orm import subqueryload"),
        (r"from sqlalchemy import.*subqueryload", "from sqlalchemy.orm import subqueryload"),
        
        # lazyload
        (r"from sqlalchemy import lazyload", "from sqlalchemy.orm import lazyload"),
        (r"from sqlalchemy import.*lazyload", "from sqlalchemy.orm import lazyload"),
        
        # immediateload
        (r"from sqlalchemy import immediateload", "from sqlalchemy.orm import immediateload"),
        (r"from sqlalchemy import.*immediateload", "from sqlalchemy.orm import immediateload"),
        
        # noload
        (r"from sqlalchemy import noload", "from sqlalchemy.orm import noload"),
        (r"from sqlalchemy import.*noload", "from sqlalchemy.orm import noload"),
        
        # contains_eager
        (r"from sqlalchemy import contains_eager", "from sqlalchemy.orm import contains_eager"),
        (r"from sqlalchemy import.*contains_eager", "from sqlalchemy.orm import contains_eager"),
        
        # defer
        (r"from sqlalchemy import defer", "from sqlalchemy.orm import defer"),
        (r"from sqlalchemy import.*defer", "from sqlalchemy.orm import defer"),
        
        # undefer
        (r"from sqlalchemy import undefer", "from sqlalchemy.orm import undefer"),
        (r"from sqlalchemy import.*undefer", "from sqlalchemy.orm import undefer"),
        
        # undefer_group
        (r"from sqlalchemy import undefer_group", "from sqlalchemy.orm import undefer_group"),
        (r"from sqlalchemy import.*undefer_group", "from sqlalchemy.orm import undefer_group"),
        
        # with_expression
        (r"from sqlalchemy import with_expression", "from sqlalchemy.orm import with_expression"),
        (r"from sqlalchemy import.*with_expression", "from sqlalchemy.orm import with_expression"),
    ]
    
    fixed_files = []
    
    for py_file in backend_dir.rglob("*.py"):
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            modified = False
            
            for pattern, replacement in import_fixes:
                if re.search(pattern, content):
                    content = re.sub(pattern, replacement, content)
                    modified = True
                    log(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ {py_file}")
            
            if modified:
                with open(py_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_files.append(str(py_file))
                
        except Exception as e:
            log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {py_file}: {e}")
    
    return fixed_files

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    critical_modules = [
        "app.main",
        "app.services.auth_service",
        "app.services.ride_service",
        "app.api.auth",
        "app.api.rides"
    ]
    
    failed_imports = []
    
    for module in critical_modules:
        try:
            __import__(module)
            log(f"‚úÖ {module} - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        except ImportError as e:
            log(f"‚ùå {module} - –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
            failed_imports.append((module, str(e)))
        except Exception as e:
            log(f"‚ùå {module} - –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            failed_imports.append((module, str(e)))
    
    return failed_imports

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    import shutil
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup_sqlalchemy_fix_{timestamp}"
    
    try:
        shutil.copytree("backend", backup_dir)
        log(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
        return backup_dir
    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    log("üö® –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø SQLALCHEMY")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ SQLAlchemy
    log("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ SQLAlchemy...")
    version = check_sqlalchemy_version()
    if not version:
        log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    log("2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    backup_dir = create_backup()
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    log("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ SQLAlchemy...")
    fixed_files = fix_sqlalchemy_imports()
    log(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(fixed_files)}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    log("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    failed_imports = test_imports()
    
    if failed_imports:
        log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–ú–ü–û–†–¢–ê:")
        for module, error in failed_imports:
            log(f"   {module}: {error}")
        return False
    else:
        log("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–ú–ü–û–†–¢–´ –£–°–ü–ï–®–ù–´")
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    log("5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        import app.main
        log("‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£")
        return True
    except Exception as e:
        log(f"‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        log("üéâ –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        sys.exit(0)
    else:
        log("üí• –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
        sys.exit(1) 