#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
"""

import requests
import json
import subprocess
import sys
from datetime import datetime

def log(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_backend_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥"""
    try:
        url = "https://pax-backend-2gng.onrender.com/health"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ –ë—ç–∫–µ–Ω–¥ –æ—Ç–≤–µ—á–∞–µ—Ç: {data}")
            
            if data.get("database") == "connected":
                log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–ø–æ –¥–∞–Ω–Ω—ã–º –±—ç–∫–µ–Ω–¥–∞)")
                return True
            else:
                log("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–ø–æ –¥–∞–Ω–Ω—ã–º –±—ç–∫–µ–Ω–¥–∞)")
                return False
        else:
            log(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞: {e}")
        return False

def check_database_url():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_url = "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain"
    
    log(f"üìã URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_url}")
    
    # –ü–∞—Ä—Å–∏–Ω–≥ URL
    parts = db_url.split('@')
    if len(parts) != 2:
        log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    auth_part = parts[0].replace('postgresql://', '')
    host_part = parts[1]
    
    username = auth_part.split(':')[0]
    password = auth_part.split(':')[1]
    
    host_port = host_part.split('/')[0]
    database = host_part.split('/')[1]
    
    host = host_port.split(':')[0] if ':' in host_port else host_port
    port = host_port.split(':')[1] if ':' in host_port else '5432'
    
    log(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    log(f"   - –•–æ—Å—Ç: {host}")
    log(f"   - –ü–æ—Ä—Ç: {port}")
    log(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database}")
    log(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    log(f"   - –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    
    return True

def check_network_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö–æ—Å—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    host = "dpg-d1lu8jnfte5s73dv6780-a"
    
    try:
        log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
        result = subprocess.run(['nslookup', host], capture_output=True, text=True)
        if result.returncode == 0:
            log("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            log("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            result = subprocess.run(['ping', '-c', '3', host], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                log("‚úÖ Ping —É—Å–ø–µ—à–µ–Ω")
            else:
                log("‚ö†Ô∏è Ping –Ω–µ –ø—Ä–æ—à–µ–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
        except subprocess.TimeoutExpired:
            log("‚ö†Ô∏è Ping –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
        except FileNotFoundError:
            log("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ ping –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def check_alternative_database_urls():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    alternative_urls = [
        "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a.oregon-postgres.render.com/paxmain",
        "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a.oregon-postgres.render.com:5432/paxmain",
        "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain?sslmode=require"
    ]
    
    log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    for i, url in enumerate(alternative_urls, 1):
        log(f"üìã –í–∞—Ä–∏–∞–Ω—Ç {i}: {url}")
        
        try:
            import psycopg2
            from urllib.parse import urlparse
            
            parsed = urlparse(url)
            
            conn = psycopg2.connect(
                host=parsed.hostname,
                port=parsed.port or 5432,
                database=parsed.path[1:],
                user=parsed.username,
                password=parsed.password,
                connect_timeout=5
            )
            
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
            cursor.close()
            conn.close()
            
            log(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {i} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return url
            
        except Exception as e:
            log(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {i} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {str(e)[:100]}...")
    
    return None

def check_render_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Render API
        log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã
        ports = [5432, 5433, 5434]
        host = "dpg-d1lu8jnfte5s73dv6780-a"
        
        for port in ports:
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((host, port))
                sock.close()
                
                if result == 0:
                    log(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç –Ω–∞ {host}")
                else:
                    log(f"‚ùå –ü–æ—Ä—Ç {port} –∑–∞–∫—Ä—ã—Ç –Ω–∞ {host}")
                    
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Render: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    log("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    check_database_url()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    check_network_connectivity()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    backend_db_ok = check_backend_database_status()
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL
    working_url = check_alternative_database_urls()
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Render
    check_render_database_status()
    
    # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    log("-" * 30)
    
    if backend_db_ok:
        log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ –¥–∞–Ω–Ω—ã–º –±—ç–∫–µ–Ω–¥–∞)")
    else:
        log("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ –¥–∞–Ω–Ω—ã–º –±—ç–∫–µ–Ω–¥–∞)")
    
    if working_url:
        log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π URL: {working_url}")
    else:
        log("‚ùå –†–∞–±–æ—á–∏–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    log("-" * 30)
    
    if not backend_db_ok:
        log("üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥ –Ω–∞ Render")
        log("   - –ó–∞–π–¥–∏—Ç–µ –≤ Render Dashboard")
        log("   - –ù–∞–π–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å pax-backend-2gng")
        log("   - –ù–∞–∂–º–∏—Ç–µ 'Manual Deploy'")
    
    if working_url:
        log("üîß –û–±–Ω–æ–≤–∏—Ç–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        log(f"   - –ù–æ–≤—ã–π URL: {working_url}")
        log("   - –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if not working_url and not backend_db_ok:
        log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render")
        log("   - –ó–∞–π–¥–∏—Ç–µ –≤ Render Dashboard")
        log("   - –ù–∞–π–¥–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö paxmain")
        log("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    
    # 8. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if backend_db_ok:
        log("\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢!")
        return True
    else:
        log("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 