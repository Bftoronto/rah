#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã PAX
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Ñ–∞–π–ª–∞—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import re
import shutil
from pathlib import Path
from datetime import datetime

class SystemConfigurationFixer:
    def __init__(self):
        self.fixes_applied = []
        self.errors = []
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.correct_config = {
            "database_url": "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain",
            "database_password": "IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN",
            "backend_url": "https://pax-backend-2gng.onrender.com",
            "frontend_url": "https://frabjous-florentine-c506b0.netlify.app",
            "telegram_bot_token": "8187393599:AAEudOluahmhNJixt_hW8mvWjWC0eh1YIlA",
            "telegram_bot_username": "paxdemobot"
        }
    
    def print_header(self, title):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"üîß {title}")
        print(f"{'='*60}")
    
    def print_result(self, action, status, details=""):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {action}")
        if details:
            print(f"   {details}")
    
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
        try:
            backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            shutil.copy2(file_path, backup_path)
            return backup_path
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {file_path}: {e}")
            return None
    
    def fix_database_configuration(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        files_to_fix = [
            "backend/app/config/settings.py",
            "backend/render.yaml"
        ]
        
        for file_path in files_to_fix:
            if Path(file_path).exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = self.backup_file(file_path)
                    if not backup_path:
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    old_db_url_patterns = [
                        r'DATABASE_URL.*=.*["\']([^"\']+)["\']',
                        r'database_url.*=.*["\']([^"\']+)["\']',
                        r'url.*=.*["\']([^"\']+)["\']'
                    ]
                    
                    content_fixed = content
                    for pattern in old_db_url_patterns:
                        content_fixed = re.sub(
                            pattern,
                            lambda m: m.group(0).replace(m.group(1), self.correct_config["database_url"]),
                            content_fixed
                        )
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                    content_fixed = content_fixed.replace(
                        "your-super-secret-jwt-key-change-in-production",
                        self.correct_config["database_password"]
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content_fixed)
                    
                    self.print_result(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path}", True, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    self.fixes_applied.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω {file_path}")
                    
                except Exception as e:
                    self.print_result(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}", False, str(e))
                    self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def fix_backend_configuration(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–∞"""
        self.print_header("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–≠–ö–ï–ù–î–ê")
        
        files_to_fix = [
            "backend/render.yaml",
            "backend/docker-compose.yml"
        ]
        
        for file_path in files_to_fix:
            if Path(file_path).exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = self.backup_file(file_path)
                    if not backup_path:
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –±—ç–∫–µ–Ω–¥–∞
                    content_fixed = content.replace(
                        "localhost:8000",
                        self.correct_config["backend_url"]
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content_fixed)
                    
                    self.print_result(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path}", True, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    self.fixes_applied.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω {file_path}")
                    
                except Exception as e:
                    self.print_result(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}", False, str(e))
                    self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def fix_frontend_configuration(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        self.print_header("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        
        files_to_fix = [
            "frontend/_redirects",
            "frontend/assets/js/websocket.js",
            "frontend/assets/js/app.js"
        ]
        
        for file_path in files_to_fix:
            if Path(file_path).exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = self.backup_file(file_path)
                    if not backup_path:
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                    content_fixed = content.replace(
                        "localhost:3000",
                        self.correct_config["frontend_url"]
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content_fixed)
                    
                    self.print_result(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path}", True, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    self.fixes_applied.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω {file_path}")
                    
                except Exception as e:
                    self.print_result(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}", False, str(e))
                    self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def fix_telegram_bot_configuration(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
        self.print_header("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê")
        
        files_to_fix = [
            "backend/app/config/settings.py",
            "backend/app/utils/telegram.py",
            "backend/app/utils/telegram_validator.py",
            "backend/app/utils/security.py",
            "backend/app/utils/security_enhanced.py",
            "backend/docker-compose.yml"
        ]
        
        for file_path in files_to_fix:
            if Path(file_path).exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = self.backup_file(file_path)
                    if not backup_path:
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
                    old_token_patterns = [
                        r'TELEGRAM_BOT_TOKEN.*=.*["\']([^"\']+)["\']',
                        r'telegram_bot_token.*=.*["\']([^"\']+)["\']',
                        r'bot_token.*=.*["\']([^"\']+)["\']'
                    ]
                    
                    content_fixed = content
                    for pattern in old_token_patterns:
                        content_fixed = re.sub(
                            pattern,
                            lambda m: m.group(0).replace(m.group(1), self.correct_config["telegram_bot_token"]),
                            content_fixed
                        )
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º username –±–æ—Ç–∞
                    content_fixed = content_fixed.replace(
                        "your-bot-username",
                        self.correct_config["telegram_bot_username"]
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content_fixed)
                    
                    self.print_result(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {file_path}", True, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    self.fixes_applied.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω {file_path}")
                    
                except Exception as e:
                    self.print_result(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}", False, str(e))
                    self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def fix_cors_configuration(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.print_header("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CORS –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        cors_files = [
            "backend/app/main.py"
        ]
        
        for file_path in cors_files:
            if Path(file_path).exists():
                try:
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_path = self.backup_file(file_path)
                    if not backup_path:
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º Telegram Web App –≤ CORS origins
                    telegram_origins = [
                        "https://web.telegram.org",
                        "https://t.me",
                        "https://frabjous-florentine-c506b0.netlify.app"
                    ]
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ CORS origins
                    cors_pattern = r'allow_origins\s*=\s*\[([^\]]*)\]'
                    match = re.search(cors_pattern, content)
                    
                    if match:
                        existing_origins = match.group(1)
                        # –î–æ–±–∞–≤–ª—è–µ–º Telegram origins –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                        for origin in telegram_origins:
                            if origin not in existing_origins:
                                existing_origins += f', "{origin}"'
                        
                        # –ó–∞–º–µ–Ω—è–µ–º CORS origins
                        content_fixed = re.sub(
                            cors_pattern,
                            f'allow_origins = [{existing_origins}]',
                            content
                        )
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content_fixed)
                        
                        self.print_result(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω CORS –≤ {file_path}", True, f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                        self.fixes_applied.append(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω CORS –≤ {file_path}")
                    else:
                        self.print_result(f"CORS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_path}", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                        
                except Exception as e:
                    self.print_result(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS –≤ {file_path}", False, str(e))
                    self.errors.append(f"–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS –≤ {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def generate_fix_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
        self.print_header("–û–¢–ß–ï–¢ –û–ë –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•")
        
        total_fixes = len(self.fixes_applied)
        total_errors = len(self.errors)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {total_fixes}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_errors}")
        
        if total_fixes > 0:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
            for fix in self.fixes_applied:
                print(f"   ‚Ä¢ {fix}")
        
        if total_errors > 0:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_fixes": total_fixes,
            "total_errors": total_errors,
            "fixes_applied": self.fixes_applied,
            "errors": self.errors
        }
        
        with open('fix_report.json', 'w', encoding='utf-8') as f:
            import json
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: fix_report.json")
        
        return total_errors == 0
    
    def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ PAX")
        print("=" * 80)
        
        self.fix_database_configuration()
        self.fix_backend_configuration()
        self.fix_frontend_configuration()
        self.fix_telegram_bot_configuration()
        self.fix_cors_configuration()
        
        return self.generate_fix_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = SystemConfigurationFixer()
    success = fixer.run_all_fixes()
    
    if success:
        print(f"\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    else:
        print(f"\n‚ö†Ô∏è  –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    main() 