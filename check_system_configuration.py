#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã PAX
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –±—ç–∫–µ–Ω–¥–∞, —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ Telegram –±–æ—Ç–∞
"""

import requests
import json
import os
import sys
import time
from datetime import datetime
from pathlib import Path

class SystemConfigurationChecker:
    def __init__(self):
        self.results = {}
        self.issues = []
        self.warnings = []
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.expected_config = {
            "database": {
                "url": "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain",
                "password": "IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN"
            },
            "backend": {
                "url": "https://pax-backend-2gng.onrender.com/",
                "health_endpoint": "https://pax-backend-2gng.onrender.com/health"
            },
            "frontend": {
                "url": "https://frabjous-florentine-c506b0.netlify.app/",
                "api_redirect": "https://pax-backend-2gng.onrender.com/api/"
            },
            "telegram_bot": {
                "username": "@paxdemobot",
                "token": "8187393599:AAEudOluahmhNJixt_hW8mvWjWC0eh1YIlA"
            }
        }
    
    def print_header(self, title):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def print_result(self, test_name, status, details=""):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {test_name}")
        if details:
            print(f"   {details}")
    
    def check_database_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = [
            "backend/app/config/settings.py",
            "backend/app/config/legacy_config.py", 
            "backend/app/config/legacy_config_simple.py",
            "backend/alembic.ini",
            "backend/docker-compose.yml",
            "backend/render.yaml"
        ]
        
        expected_db_url = self.expected_config["database"]["url"]
        expected_password = self.expected_config["database"]["password"]
        
        for file_path in config_files:
            if Path(file_path).exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if expected_db_url in content:
                        self.print_result(f"–§–∞–π–ª {file_path}", True, "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"–§–∞–π–ª {file_path}", False, "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ {file_path}")
                        
                    if expected_password in content:
                        self.print_result(f"–ü–∞—Ä–æ–ª—å –≤ {file_path}", True, "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"–ü–∞—Ä–æ–ª—å –≤ {file_path}", False, "–ü–∞—Ä–æ–ª—å –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–æ–ª—è –≤ {file_path}")
                        
                except Exception as e:
                    self.print_result(f"–§–∞–π–ª {file_path}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.warnings.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def check_backend_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–∞"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ë–≠–ö–ï–ù–î–ê")
        
        backend_url = self.expected_config["backend"]["url"]
        health_url = self.expected_config["backend"]["health_endpoint"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞
        try:
            response = requests.get(health_url, timeout=10)
            if response.status_code == 200:
                self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞", True, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            else:
                self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                self.issues.append(f"–ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–∞—Ö
        backend_files = [
            "backend/app/main.py",
            "backend/render.yaml",
            "backend/docker-compose.yml"
        ]
        
        for file_path in backend_files:
            if Path(file_path).exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if "pax-backend-2gng.onrender.com" in content:
                        self.print_result(f"URL –≤ {file_path}", True, "URL –±—ç–∫–µ–Ω–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"URL –≤ {file_path}", False, "URL –±—ç–∫–µ–Ω–¥–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ URL –≤ {file_path}")
                        
                except Exception as e:
                    self.print_result(f"–§–∞–π–ª {file_path}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.warnings.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def check_frontend_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê")
        
        frontend_url = self.expected_config["frontend"]["url"]
        api_redirect = self.expected_config["frontend"]["api_redirect"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        try:
            response = requests.get(frontend_url, timeout=10)
            if response.status_code == 200:
                self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞", True, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            else:
                self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                self.issues.append(f"–§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.print_result("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞", False, f"–û—à–∏–±–∫–∞: {e}")
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–∞—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        frontend_files = [
            "frontend/assets/js/api.js",
            "frontend/_redirects",
            "frontend/assets/js/websocket.js",
            "frontend/assets/js/app.js"
        ]
        
        for file_path in frontend_files:
            if Path(file_path).exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if "pax-backend-2gng.onrender.com" in content:
                        self.print_result(f"API URL –≤ {file_path}", True, "API URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"API URL –≤ {file_path}", False, "API URL –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ API URL –≤ {file_path}")
                    
                    if "frabjous-florentine-c506b0.netlify.app" in content:
                        self.print_result(f"Frontend URL –≤ {file_path}", True, "Frontend URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"Frontend URL –≤ {file_path}", False, "Frontend URL –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Frontend URL –≤ {file_path}")
                        
                except Exception as e:
                    self.print_result(f"–§–∞–π–ª {file_path}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.warnings.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    def check_telegram_bot_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê")
        
        expected_token = self.expected_config["telegram_bot"]["token"]
        expected_username = self.expected_config["telegram_bot"]["username"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–∞—Ö
        telegram_files = [
            "backend/app/config/settings.py",
            "backend/app/config/legacy_config.py",
            "backend/app/config/legacy_config_simple.py",
            "backend/app/utils/telegram.py",
            "backend/app/utils/telegram_validator.py",
            "backend/app/utils/security.py",
            "backend/app/utils/security_enhanced.py",
            "backend/render.yaml",
            "backend/docker-compose.yml"
        ]
        
        for file_path in telegram_files:
            if Path(file_path).exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if expected_token in content:
                        self.print_result(f"Bot Token –≤ {file_path}", True, "Token —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"Bot Token –≤ {file_path}", False, "Token –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Bot Token –≤ {file_path}")
                    
                    if "paxdemobot" in content:
                        self.print_result(f"Bot Username –≤ {file_path}", True, "Username —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.print_result(f"Bot Username –≤ {file_path}", False, "Username –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
                        self.issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Bot Username –≤ {file_path}")
                        
                except Exception as e:
                    self.print_result(f"–§–∞–π–ª {file_path}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            else:
                self.print_result(f"–§–∞–π–ª {file_path}", False, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.warnings.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Bot API
        try:
            bot_api_url = f"https://api.telegram.org/bot{expected_token}/getMe"
            response = requests.get(bot_api_url, timeout=10)
            if response.status_code == 200:
                bot_data = response.json()
                if bot_data.get("ok"):
                    bot_info = bot_data.get("result", {})
                    self.print_result("Telegram Bot API", True, f"–ë–æ—Ç: @{bot_info.get('username', 'N/A')}")
                else:
                    self.print_result("Telegram Bot API", False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
                    self.issues.append("–û—à–∏–±–∫–∞ Telegram Bot API")
            else:
                self.print_result("Telegram Bot API", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                self.issues.append(f"–û—à–∏–±–∫–∞ Telegram Bot API: {response.status_code}")
        except Exception as e:
            self.print_result("Telegram Bot API", False, f"–û—à–∏–±–∫–∞: {e}")
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API: {e}")
    
    def check_integration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            response = requests.get("https://pax-backend-2gng.onrender.com/health", timeout=10)
            cors_headers = response.headers.get('Access-Control-Allow-Origin', '')
            
            if 'web.telegram.org' in cors_headers or '*' in cors_headers:
                self.print_result("CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", True, "Telegram Web App —Ä–∞–∑—Ä–µ—à–µ–Ω")
            else:
                self.print_result("CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", False, "Telegram Web App –ù–ï —Ä–∞–∑—Ä–µ—à–µ–Ω")
                self.issues.append("CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Telegram Web App")
        except Exception as e:
            self.print_result("CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
        api_endpoints = [
            "/api/auth/telegram/verify",
            "/api/health",
            "/api/rides/search"
        ]
        
        for endpoint in api_endpoints:
            try:
                url = f"https://pax-backend-2gng.onrender.com{endpoint}"
                response = requests.get(url, timeout=10)
                if response.status_code in [200, 401, 404]:  # 401 –∏ 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    self.print_result(f"API endpoint {endpoint}", True, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                else:
                    self.print_result(f"API endpoint {endpoint}", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                    self.issues.append(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å API endpoint {endpoint}: {response.status_code}")
            except Exception as e:
                self.print_result(f"API endpoint {endpoint}", False, f"–û—à–∏–±–∫–∞: {e}")
                self.issues.append(f"–û—à–∏–±–∫–∞ API endpoint {endpoint}: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        total_issues = len(self.issues)
        total_warnings = len(self.warnings)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {total_issues}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
        
        if total_issues == 0:
            print(f"\nüéâ –í–°–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢!")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print(f"\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
            for issue in self.issues:
                print(f"   ‚Ä¢ {issue}")
        
        if total_warnings > 0:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_issues": total_issues,
            "total_warnings": total_warnings,
            "issues": self.issues,
            "warnings": self.warnings,
            "expected_config": self.expected_config
        }
        
        with open('system_configuration_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: system_configuration_report.json")
        
        return total_issues == 0
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –ü–†–û–í–ï–†–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ PAX")
        print("=" * 80)
        
        self.check_database_configuration()
        self.check_backend_configuration()
        self.check_frontend_configuration()
        self.check_telegram_bot_configuration()
        self.check_integration()
        
        return self.generate_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SystemConfigurationChecker()
    success = checker.run_all_checks()
    
    if success:
        print(f"\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print(f"\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò!")
        sys.exit(1)

if __name__ == "__main__":
    main() 