#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
"""

import requests
import json
import re
from datetime import datetime

# –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
EXPECTED_CONFIG = {
    "database_url": "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain",
    "database_password": "IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN",
    "backend_url": "https://pax-backend-2gng.onrender.com",
    "frontend_url": "https://frabjous-florentine-c506b0.netlify.app",
    "telegram_bot_token": "8187393599:AAEudOluahmhNJixt_hW8mvWjWC0eh1YIlA"
}

def check_file_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/app/config_simple.py
    try:
        with open('backend/app/config_simple.py', 'r') as f:
            content = f.read()
            
        if EXPECTED_CONFIG["database_url"] not in content:
            issues.append("‚ùå backend/app/config_simple.py: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL")
        else:
            print("‚úÖ backend/app/config_simple.py: DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
        if EXPECTED_CONFIG["telegram_bot_token"] not in content:
            issues.append("‚ùå backend/app/config_simple.py: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TELEGRAM_BOT_TOKEN")
        else:
            print("‚úÖ backend/app/config_simple.py: TELEGRAM_BOT_TOKEN –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
    except FileNotFoundError:
        issues.append("‚ùå backend/app/config_simple.py: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/docker-compose.yml
    try:
        with open('backend/docker-compose.yml', 'r') as f:
            content = f.read()
            
        if EXPECTED_CONFIG["database_url"] not in content:
            issues.append("‚ùå backend/docker-compose.yml: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL")
        else:
            print("‚úÖ backend/docker-compose.yml: DATABASE_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
    except FileNotFoundError:
        issues.append("‚ùå backend/docker-compose.yml: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/alembic.ini
    try:
        with open('backend/alembic.ini', 'r') as f:
            content = f.read()
            
        if EXPECTED_CONFIG["database_url"] not in content:
            issues.append("‚ùå backend/alembic.ini: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π sqlalchemy.url")
        else:
            print("‚úÖ backend/alembic.ini: sqlalchemy.url –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
    except FileNotFoundError:
        issues.append("‚ùå backend/alembic.ini: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ assets/js/api.js
    try:
        with open('assets/js/api.js', 'r') as f:
            content = f.read()
            
        if EXPECTED_CONFIG["backend_url"] not in content:
            issues.append("‚ùå assets/js/api.js: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π backend URL")
        else:
            print("‚úÖ assets/js/api.js: Backend URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–º–µ–Ω–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if "frabjous-florentine-c506b0.netlify.app" not in content:
            issues.append("‚ùå assets/js/api.js: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π frontend URL")
        else:
            print("‚úÖ assets/js/api.js: Frontend URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
    except FileNotFoundError:
        issues.append("‚ùå assets/js/api.js: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return issues

def check_backend_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞...")
    
    try:
        response = requests.get(f"{EXPECTED_CONFIG['backend_url']}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {data.get('database', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            return True
        else:
            print(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {e}")
        return False

def check_frontend_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    try:
        response = requests.get(EXPECTED_CONFIG["frontend_url"], timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return True
        else:
            print(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É: {e}")
        return False

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        response = requests.get(f"{EXPECTED_CONFIG['backend_url']}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            db_status = data.get('database', 'unknown')
            
            if db_status == 'connected':
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î: {db_status}")
                return False
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
    
    try:
        bot_token = EXPECTED_CONFIG["telegram_bot_token"]
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                print(f"‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                print(f"   –ò–º—è: {bot_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   Username: @{bot_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   ID: {bot_info.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return True
            else:
                print(f"‚ùå Telegram –±–æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    print(f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–∞—Ö
    file_issues = check_file_configuration()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    backend_ok = check_backend_connectivity()
    frontend_ok = check_frontend_connectivity()
    database_ok = check_database_connection()
    telegram_ok = check_telegram_bot()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 50)
    
    if file_issues:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        for issue in file_issues:
            print(f"   {issue}")
    else:
        print("\n‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
    
    print(f"\nüåê –°–ï–†–í–ò–°–´:")
    print(f"   –ë—ç–∫–µ–Ω–¥: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if backend_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"   –§—Ä–æ–Ω—Ç–µ–Ω–¥: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if frontend_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if database_ok else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
    print(f"   Telegram –±–æ—Ç: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if telegram_ok else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    all_ok = not file_issues and backend_ok and frontend_ok and database_ok and telegram_ok
    
    print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {'‚úÖ –í–°–ï –û–ö' if all_ok else '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    if not all_ok:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if file_issues:
            print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        if not backend_ok:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞")
        if not frontend_ok:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        if not database_ok:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        if not telegram_ok:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")

if __name__ == "__main__":
    main() 