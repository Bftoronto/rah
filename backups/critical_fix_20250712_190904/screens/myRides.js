import { stateManager } from '../state.js';

class MyRidesScreen {
    constructor() {
        this.stateManager = stateManager;
    }

    render(rides = []) {
        return `
            ${!this.stateManager.getState('hideMyRidesInfoBanner') ? `
                <div class="info-banner" id="myRidesInfoBanner">
                    <div>
                        <div class="info-banner-title">–û—Ç–º–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏</div>
                        <div class="info-banner-text">–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –±–µ–∑ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞</div>
                    </div>
                    <button class="info-banner-close" id="closeMyRidesInfoBanner">&times;</button>
                </div>
            ` : ''}
            <!-- <h2 class="section-title">–í–∞—à–∏ –ø–æ–µ–∑–¥–∫–∏</h2> -->
            
            ${rides.length === 0 ? `
                <div class="text-center p-20">
                    <div class="mb-20" style="font-size: 48px; color: #ccc;">
                        <i class="fas fa-car"></i>
                    </div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫</p>
                    <button class="btn btn-primary mt-20" id="createRideBtn">–°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É</button>
                </div>
            ` : `
                ${rides.map(ride => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –ø–æ–µ–∑–¥–∫–∞
                    const now = new Date();
                    const [day, monthName] = ride.date.split(' ');
                    const months = ['—è–Ω–≤–∞—Ä—è','—Ñ–µ–≤—Ä–∞–ª—è','–º–∞—Ä—Ç–∞','–∞–ø—Ä–µ–ª—è','–º–∞—è','–∏—é–Ω—è','–∏—é–ª—è','–∞–≤–≥—É—Å—Ç–∞','—Å–µ–Ω—Ç—è–±—Ä—è','–æ–∫—Ç—è–±—Ä—è','–Ω–æ—è–±—Ä—è','–¥–µ–∫–∞–±—Ä—è'];
                    const month = months.indexOf(monthName);
                    let rideDateTime = new Date(now.getFullYear(), month, parseInt(day));
                    if (ride.time) {
                        const [h, m] = ride.time.split(':');
                        rideDateTime.setHours(parseInt(h), parseInt(m), 0, 0);
                    }
                    const isFuture = rideDateTime.getTime() > now.getTime();
                    return `
                    <div class="ride-card" data-ride-id="${ride.id}">
                        <div class="card-header">${ride.date}</div>
                        <div class="ride-time">
                            <span>${ride.time}</span>
                        </div>
                        
                        <div class="ride-location">
                            <div class="ride-location-dot start"></div>
                            <div class="ride-location-text">
                                <div class="location-title">${ride.from.split(',')[0]}</div>
                                <div>${ride.from.split(',').slice(1).join(',').trim()}</div>
                            </div>
                            
                            <div class="ride-location-dot end"></div>
                            <div class="ride-location-text">
                                <div class="location-title">${ride.to.split(',')[0]}</div>
                                <div>${ride.to.split(',').slice(1).join(',').trim()}</div>
                            </div>
                        </div>
                        
                        <div class="ride-footer">
                            <div class="driver-info">
                                <div class="driver-avatar">${ride.driver.name.split(' ').map(n => n[0]).join('')}</div>
                                <div>${ride.driver.name}</div>
                            </div>
                            <div class="ride-price">${ride.price} ‚ÇΩ</div>
                        </div>
                        <div class="ride-payment-info" aria-label="–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã" style="margin-top:4px;font-size:14px;">
                            <span role="img" aria-label="–Ω–∞–ª–∏—á–Ω—ã–µ">üíµ</span> –ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç <span style="color:#bbb;">|</span> <span role="img" aria-label="–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É">üí≥</span> –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É
                        </div>
                        
                        ${ride.passengers.length > 0 ? `
                            <div class="card-body">
                                <div class="form-label">–í–∞—à–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—ã</div>
                                <div>${ride.passengers.join(', ')}</div>
                            </div>
                        ` : ''}
                        
                        ${isFuture ? `<div class="card-body">
                            <button class="btn btn-outline w-100" data-action="cancel" data-ride-id="${ride.id}">
                                ${ride.status === 'booked' ? '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É'}
                            </button>
                        </div>` : ''}
                    </div>
                    `;
                }).join('')}
            `}
        `;
    }

    setupEventHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
        const closeBanner = document.getElementById('closeMyRidesInfoBanner');
        if (closeBanner) {
            closeBanner.addEventListener('click', () => {
                this.stateManager.setState('hideMyRidesInfoBanner', true);
                window.router.navigate('myRides');
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
        const createRideBtn = document.getElementById('createRideBtn');
        if (createRideBtn) {
            createRideBtn.addEventListener('click', () => {
                window.router.navigate('createRide');
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–æ–∫
        document.querySelectorAll('[data-action="cancel"]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const rideId = btn.getAttribute('data-ride-id');
                const ride = this.stateManager.getRides().find(r => r.id === parseInt(rideId));
                
                if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É${ride ? ` "${ride.from} ‚Üí ${ride.to}"` : ''}?`)) {
                    window.router.navigate('loading', '–û—Ç–º–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏...');
                    
                    setTimeout(() => {
                        const userData = this.stateManager.getUserData();
                        userData.cancelledRides = (userData.cancelledRides || 0) + 1;
                        this.stateManager.updateUserData(userData);
                        window.utils.showNotification('–£—Å–ø–µ—Ö', '–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'success');
                        
                        window.api.getMyRides().then(rides => {
                            window.router.navigate('myRides', rides);
                        }).catch(error => {
                            window.utils.handleApiError(error, 'getMyRides');
                            window.router.navigate('myRides');
                        });
                    }, 1500);
                }
            });
        });
    }
}

export default MyRidesScreen; 