#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Telegram Mini App
"""

import requests
import json
import time
from datetime import datetime

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    servers = {
        "Backend (Render)": "https://pax-backend-2gng.onrender.com",
        "Frontend (Netlify)": "https://frabjous-florentine-c506b0.netlify.app"
    }
    
    for name, url in servers.items():
        try:
            response = requests.get(url, timeout=10)
            status = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è"
            print(f"{status} {name}: {response.status_code} - {url}")
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")

def check_cors_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    backend_url = "https://pax-backend-2gng.onrender.com"
    origins = [
        "https://web.telegram.org",
        "https://t.me",
        "https://frabjous-florentine-c506b0.netlify.app"
    ]
    
    for origin in origins:
        try:
            headers = {
                "Origin": origin,
                "Access-Control-Request-Method": "POST",
                "Access-Control-Request-Headers": "Content-Type"
            }
            
            response = requests.options(
                f"{backend_url}/api/auth/telegram/verify",
                headers=headers,
                timeout=10
            )
            
            cors_headers = {
                "Access-Control-Allow-Origin": response.headers.get("Access-Control-Allow-Origin"),
                "Access-Control-Allow-Methods": response.headers.get("Access-Control-Allow-Methods"),
                "Access-Control-Allow-Headers": response.headers.get("Access-Control-Allow-Headers"),
                "Access-Control-Allow-Credentials": response.headers.get("Access-Control-Allow-Credentials")
            }
            
            status = "‚úÖ" if response.status_code == 200 else "‚ö†Ô∏è"
            print(f"{status} {origin}: {response.status_code}")
            
            for header, value in cors_headers.items():
                if value:
                    print(f"   {header}: {value}")
                    
        except Exception as e:
            print(f"‚ùå {origin}: –û—à–∏–±–∫–∞ - {e}")

def check_telegram_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    backend_url = "https://pax-backend-2gng.onrender.com"
    endpoints = [
        "/api/auth/telegram/verify",
        "/api/auth/telegram/webhook",
        "/api/rides/search",
        "/api/user/profile"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{backend_url}{endpoint}", timeout=10)
            status = "‚úÖ" if response.status_code in [200, 405] else "‚ö†Ô∏è"
            print(f"{status} {endpoint}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")

def check_free_tier_limitations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    limitations = {
        "Render (Backend)": [
            "–°–ø–∏–Ω-–¥–∞—É–Ω –ø–æ—Å–ª–µ 15 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å",
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ —Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
        ],
        "Netlify (Frontend)": [
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–ª–æ–µ–≤",
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤"
        ]
    }
    
    for service, limits in limitations.items():
        print(f"\nüìã {service}:")
        for limit in limits:
            print(f"   ‚ö†Ô∏è {limit}")

def check_telegram_webapp_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram Web App"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram Web App...")
    
    requirements = [
        "HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        "–í–∞–ª–∏–¥–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ 24/7",
        "–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (< 3 —Å–µ–∫)",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Web App API"
    ]
    
    for req in requirements:
        print(f"   ‚úÖ {req}")

def generate_recommendations():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
    
    recommendations = [
        "1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã Selectel:",
        "   - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏–Ω-–¥–∞—É–Ω–æ–≤",
        "   - –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "   - –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
        "   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "",
        "2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
        "   - –î–æ–±–∞–≤–∏—Ç—å keep-alive –º–µ—Ö–∞–Ω–∏–∑–º—ã",
        "   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞–Ω–¥–ª–∞",
        "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤",
        "",
        "3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:",
        "   - –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫",
        "   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å health checks",
        "   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
        "",
        "4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:",
        "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vercel –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞",
        "   - Heroku –¥–ª—è –±—ç–∫–µ–Ω–¥–∞",
        "   - DigitalOcean App Platform"
    ]
    
    for rec in recommendations:
        print(rec)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram Mini App")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    check_server_status()
    check_cors_configuration()
    check_telegram_api_endpoints()
    check_free_tier_limitations()
    check_telegram_webapp_requirements()
    generate_recommendations()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 