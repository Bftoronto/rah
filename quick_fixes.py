#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±–µ–∫–µ–Ω–¥–∞
–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import os
import shutil
from datetime import datetime

class QuickFixes:
    def __init__(self, project_root="/Users/alexandrkrstich/Downloads/v1.14"):
        self.project_root = project_root
        self.backend_path = os.path.join(project_root, "backend")
        self.backup_path = os.path.join(project_root, f"backup_quick_fixes_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
        
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–∞
        os.makedirs(self.backup_path, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
        schemas_path = os.path.join(self.backend_path, "app", "schemas")
        backup_schemas = os.path.join(self.backup_path, "schemas")
        if os.path.exists(schemas_path):
            shutil.copytree(schemas_path, backup_schemas)
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_path}")
    
    def apply_user_schema_fix(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å—Ö–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ —Å—Ö–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        user_schema_path = os.path.join(self.backend_path, "app", "schemas", "user.py")
        user_fixed_path = os.path.join(self.project_root, "backend", "app", "schemas", "user_fixed.py")
        
        if os.path.exists(user_fixed_path):
            shutil.copy2(user_fixed_path, user_schema_path)
            print("‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –§–∞–π–ª user_fixed.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def apply_rating_schema_fix(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å—Ö–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ —Å—Ö–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
        
        rating_schema_path = os.path.join(self.backend_path, "app", "schemas", "rating.py")
        rating_fixed_path = os.path.join(self.project_root, "backend", "app", "schemas", "rating_fixed.py")
        
        if os.path.exists(rating_fixed_path):
            shutil.copy2(rating_fixed_path, rating_schema_path)
            print("‚úÖ –°—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            print("‚ùå –§–∞–π–ª rating_fixed.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def update_imports(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ API –º–æ–¥—É–ª—è—Ö"""
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ auth.py
        auth_path = os.path.join(self.backend_path, "app", "api", "auth.py")
        if os.path.exists(auth_path):
            with open(auth_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã
            if "from ..schemas.user import" in content:
                print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –≤ auth.py –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ auth.py")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ rating.py
        rating_api_path = os.path.join(self.backend_path, "app", "api", "rating.py")
        if os.path.exists(rating_api_path):
            with open(rating_api_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            if "from ..schemas.rating import" in content:
                print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –≤ rating.py –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ rating.py")
    
    def create_test_migration(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        migration_content = '''"""
–¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º
"""

from alembic import op
import sqlalchemy as sa

# revision identifiers
revision = 'quick_fix_test'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    op.create_index('idx_users_compatibility', 'users', ['balance', 'reviews', 'rating'])
    op.create_index('idx_ratings_comment_sync', 'ratings', ['from_user_id', 'target_user_id'])

def downgrade():
    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    op.drop_index('idx_users_compatibility', table_name='users')
    op.drop_index('idx_ratings_comment_sync', table_name='ratings')
'''
        
        migrations_path = os.path.join(self.backend_path, "migrations", "versions")
        os.makedirs(migrations_path, exist_ok=True)
        
        migration_file = os.path.join(migrations_path, f"quick_fix_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py")
        
        with open(migration_file, 'w', encoding='utf-8') as f:
            f.write(migration_content)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {migration_file}")
    
    def verify_fixes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_schema_path = os.path.join(self.backend_path, "app", "schemas", "user.py")
        if os.path.exists(user_schema_path):
            with open(user_schema_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if "root_validator" in content and "set_compatibility_fields" in content:
                    print("‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
                else:
                    issues.append("–°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        else:
            issues.append("–§–∞–π–ª —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        rating_schema_path = os.path.join(self.backend_path, "app", "schemas", "rating.py")
        if os.path.exists(rating_schema_path):
            with open(rating_schema_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if "sync_comment_review" in content:
                    print("‚úÖ –°—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è comment/review")
                else:
                    issues.append("–°—Ö–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è comment/review")
        else:
            issues.append("–§–∞–π–ª —Å—Ö–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if issues:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in issues:
                print(f"  - {issue}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True
    
    def create_compatibility_test(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        
        test_content = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±–µ–∫–µ–Ω–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import pytest
from app.schemas.user import UserRead
from app.schemas.rating import RatingCreate, RatingResponse

def test_user_compatibility_fields():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = {
        "id": 1,
        "telegram_id": "123456789",
        "phone": "79001234567",
        "full_name": "Test User",
        "birth_date": "1990-01-01",
        "city": "Moscow",
        "average_rating": 4.5,
        "is_active": True,
        "is_verified": True,
        "is_driver": False,
        "privacy_policy_version": "1.1",
        "privacy_policy_accepted": True,
        "privacy_policy_accepted_at": "2024-01-01T00:00:00",
        "created_at": "2024-01-01T00:00:00",
        "updated_at": "2024-01-01T00:00:00"
    }
    
    user = UserRead(**user_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    assert user.name == user.full_name
    assert user.rating == int(user.average_rating)
    assert isinstance(user.verified, dict)
    assert isinstance(user.car, dict)

def test_rating_comment_review_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π comment/review –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö"""
    
    # –¢–µ—Å—Ç —Å comment
    rating_data_comment = {
        "target_user_id": 1,
        "ride_id": 1,
        "rating": 5,
        "comment": "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!"
    }
    
    rating = RatingCreate(**rating_data_comment)
    assert rating.comment == "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!"
    assert rating.review == "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!"
    
    # –¢–µ—Å—Ç —Å review
    rating_data_review = {
        "target_user_id": 1,
        "ride_id": 1,
        "rating": 5,
        "review": "–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä!"
    }
    
    rating = RatingCreate(**rating_data_review)
    assert rating.comment == "–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä!"
    assert rating.review == "–û—Ç–ª–∏—á–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä!"

if __name__ == "__main__":
    test_user_compatibility_fields()
    test_rating_comment_review_compatibility()
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
'''
        
        tests_path = os.path.join(self.backend_path, "tests")
        os.makedirs(tests_path, exist_ok=True)
        
        test_file = os.path.join(tests_path, "test_compatibility.py")
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        print(f"‚úÖ –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω: {test_file}")
    
    def run_all_fixes(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 50)
        
        try:
            self.create_backup()
            self.apply_user_schema_fix()
            self.apply_rating_schema_fix()
            self.update_imports()
            self.create_test_migration()
            self.create_compatibility_test()
            
            if self.verify_fixes():
                print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")
                print("\nüìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
                print("  ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (balance, reviews, rating)")
                print("  ‚úÖ –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è comment/review –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö")
                print("  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–ª–∏–∞—Å–æ–≤ –ø–æ–ª–µ–π")
                print("  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
                print("\nüöÄ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            else:
                print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ò–õ–ò–°–¨")
                print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {self.backup_path}")
                
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–†–ò–ú–ï–ù–ï–ù–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: {str(e)}")
            print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {self.backup_path}")

if __name__ == "__main__":
    fixer = QuickFixes()
    fixer.run_all_fixes()
