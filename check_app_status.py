#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
"""

import requests
import json
from datetime import datetime

# URL'—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
FRONTEND_URL = "https://frabjous-florentine-c506b0.netlify.app"
BACKEND_URL = "https://pax-backend-2gng.onrender.com"

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    print(f"URL: {FRONTEND_URL}")
    
    try:
        response = requests.get(FRONTEND_URL, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            content = response.text
            if "PAX" in content:
                print("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ")
            if "Telegram" in content:
                print("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            if "assets/js" in content:
                print("‚úÖ JavaScript —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
                
            return True
        else:
            print(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É: {e}")
        return False

def check_backend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞...")
    print(f"URL: {BACKEND_URL}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        response = requests.get(f"{BACKEND_URL}/", timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            try:
                data = response.json()
                print(f"–í–µ—Ä—Å–∏—è: {data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            except:
                print("–û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
                
            return True
        else:
            print(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É: {e}")
        return False

def check_backend_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
            print(f"–°—Ç–∞—Ç—É—Å: {data.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {data.get('database', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            print(f"–í–µ—Ä—Å–∏—è: {data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            return True
        else:
            print(f"‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False

def check_api_info():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/api/info", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–í–µ—Ä—Å–∏—è: {data.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            print(f"Debug —Ä–µ–∂–∏–º: {data.get('debug', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            
            endpoints = data.get('endpoints', {})
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            for name, path in endpoints.items():
                print(f"  - {name}: {path}")
                
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API. –°—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API: {e}")
        return False

def test_telegram_verification():
    """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    print("\nü§ñ –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "id": 123456789,
            "first_name": "Test",
            "last_name": "User",
            "username": "testuser",
            "auth_date": int(datetime.now().timestamp()),
            "hash": "test_hash"
        }
        
        response = requests.post(
            f"{BACKEND_URL}/api/auth/telegram/verify",
            json=test_data,
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code in [200, 401, 500]:
            print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –æ—Ç–≤–µ—á–∞–µ—Ç")
            try:
                data = response.json()
                print(f"–û—Ç–≤–µ—Ç: {data}")
            except:
                print("–û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
            return True
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    frontend_ok = check_frontend()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–µ–Ω–¥
    backend_ok = check_backend()
    
    if backend_ok:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±—ç–∫–µ–Ω–¥–∞
        check_backend_health()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
        check_api_info()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Telegram
        test_telegram_verification()
    
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    print(f"–§—Ä–æ–Ω—Ç–µ–Ω–¥: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if frontend_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"–ë—ç–∫–µ–Ω–¥: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if backend_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if frontend_ok and backend_ok:
        print("\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç! Telegram Mini App –¥–æ–ª–∂–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.")
        print("\nüì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ @paxdemobot –≤ Telegram")
        print("2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'")
        print("3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–∞—Å")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    main() 