#!/usr/bin/env python3
"""
–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –±–µ–∑ –æ—à–∏–±–æ–∫
"""

import sys
import os
from pathlib import Path

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    print("=" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
    backend_path = Path("backend")
    if backend_path.exists():
        sys.path.insert(0, str(backend_path))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    test_env = {
        'DATABASE_URL': 'sqlite:///./test.db',
        'SECRET_KEY': 'test_secret_key_for_diagnosis_only',
        'TELEGRAM_BOT_TOKEN': 'test_bot_token',
        'REDIS_URL': 'redis://localhost:6379',
        'UPLOAD_DIR': './uploads',
        'LOG_LEVEL': 'DEBUG',
        'ENVIRONMENT': 'test'
    }
    
    for key, value in test_env.items():
        os.environ[key] = value
    
    tests = [
        ("app.main", "–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("app.api.auth", "API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        ("app.api.rides", "API –ø–æ–µ–∑–¥–æ–∫"),
        ("app.api.upload", "API –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"),
        ("app.utils.file_handler_alternative", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"),
        ("app.config.settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("app.database", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("app.models.user", "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ("app.schemas.user", "–°—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    ]
    
    failed_imports = []
    
    for module_name, description in tests:
        try:
            __import__(module_name)
            print(f"‚úÖ {description}: {module_name}")
        except ImportError as e:
            print(f"‚ùå {description}: {module_name} - {e}")
            failed_imports.append((module_name, str(e)))
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: {module_name} - {e}")
            failed_imports.append((module_name, str(e)))
    
    print("\n" + "=" * 40)
    
    if failed_imports:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for module, error in failed_imports:
            print(f"  - {module}: {error}")
        return False
    else:
        print("‚úÖ –í–°–ï –ò–ú–ü–û–†–¢–´ –£–°–ü–ï–®–ù–´")
        return True

def test_fastapi_app():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 40)
    
    try:
        from app.main import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        routes = [route.path for route in app.routes]
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        critical_endpoints = [
            "/docs",
            "/health",
            "/api/auth/login",
            "/api/rides/",
            "/api/upload/"
        ]
        
        for endpoint in critical_endpoints:
            if any(endpoint in route for route in routes):
                print(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def test_file_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    try:
        from app.utils.file_handler_alternative import FileHandler, FileValidationError, FileProcessingError
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        import tempfile
        import os
        
        with tempfile.TemporaryDirectory() as temp_dir:
            handler = FileHandler(temp_dir)
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            test_data = b"fake image data"
            test_filename = "test.jpg"
            
            try:
                result = handler.validate_file(test_data, test_filename, "avatar")
                print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except FileValidationError as e:
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.message}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            try:
                result = handler.process_file(test_data, test_filename, "avatar", 1)
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üö® –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    
    # –¢–µ—Å—Ç 2: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    fastapi_ok = test_fastapi_app()
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    file_handler_ok = test_file_handler()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"  FastAPI: {'‚úÖ' if fastapi_ok else '‚ùå'}")
    print(f"  –§–∞–π–ª—ã: {'‚úÖ' if file_handler_ok else '‚ùå'}")
    
    if all([imports_ok, fastapi_ok, file_handler_ok]):
        print("\nüéâ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn app.main:app --host 0.0.0.0 --port 8000")
        print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost:8000/docs")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤")
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("üí° –î–µ–π—Å—Ç–≤–∏—è:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")
        print("  2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("  3. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞")

if __name__ == "__main__":
    main() 