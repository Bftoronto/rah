#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
"""

import requests
import json
import time
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

class IntegrationTester:
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   {details}")
        
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
    
    def test_auth_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
        telegram_data = {
            "user": {
                "id": 123456789,
                "first_name": "Test",
                "last_name": "User",
                "username": "testuser",
                "photo_url": "https://example.com/photo.jpg",
                "auth_date": int(time.time()),
                "hash": "test_hash"
            },
            "auth_date": int(time.time()),
            "hash": "test_hash",
            "initData": "",
            "query_id": "",
            "start_param": ""
        }
        
        try:
            # –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
            response = self.session.post(
                f"{API_BASE}/auth/telegram/verify",
                json=telegram_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {data.get('exists', False)}")
            else:
                self.log_test("Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("Telegram –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def test_rating_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        print("\n‚≠ê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating_data = {
            "target_user_id": 1,
            "ride_id": 1,
            "rating": 5,
            "comment": "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º."
        }
        
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            response = self.session.post(
                f"{API_BASE}/rating/",
                json=rating_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", True, f"–†–µ–π—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {data.get('rating', 0)}")
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", False, f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
        review_data = {
            "target_user_id": 1,
            "ride_id": 1,
            "text": "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–µ–∑–¥–∫–∞ –±—ã–ª–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.",
            "is_positive": True
        }
        
        try:
            response = self.session.post(
                f"{API_BASE}/rating/review",
                json=review_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞", True, f"–û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω: {data.get('text', '')[:50]}...")
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞", False, f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def test_notification_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            response = self.session.get(f"{API_BASE}/notifications/settings/1")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", True, 
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: ride={data.get('ride_notifications')}")
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", False, 
                            f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_data = {
            "user_id": 1,
            "ride_notifications": True,
            "system_notifications": True,
            "reminder_notifications": False,
            "marketing_notifications": False,
            "quiet_hours_start": "22:00",
            "quiet_hours_end": "08:00",
            "email_notifications": False,
            "push_notifications": True
        }
        
        try:
            response = self.session.put(
                f"{API_BASE}/notifications/settings/1",
                json=settings_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", True, 
                            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data.get('message', '')}")
            else:
                self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", False, 
                            f"HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        endpoints = [
            ("GET", "/auth/privacy-policy", "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"),
            ("GET", "/rating/user/1/summary", "–°–≤–æ–¥–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"),
            ("GET", "/rating/top", "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            ("GET", "/rating/statistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"),
            ("GET", "/notifications/status", "–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        ]
        
        for method, endpoint, description in endpoints:
            try:
                response = self.session.request(
                    method, 
                    f"{API_BASE}{endpoint}",
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    self.log_test(f"{description}", True, f"HTTP {response.status_code}")
                else:
                    self.log_test(f"{description}", False, f"HTTP {response.status_code}: {response.text}")
                    
            except Exception as e:
                self.log_test(f"{description}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        try:
            response = self.session.get(f"{BASE_URL}/docs")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_auth_integration()
        self.test_rating_integration()
        self.test_notification_integration()
        self.test_api_endpoints()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        if failed_tests == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è  –ü–†–û–í–ê–õ–ï–ù–û –¢–ï–°–¢–û–í: {failed_tests}")
            print("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  - {result['test']}: {result['details']}")

if __name__ == "__main__":
    tester = IntegrationTester()
    tester.run_all_tests() 