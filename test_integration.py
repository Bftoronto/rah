#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏ –∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import requests
import json
import time
import sys
from datetime import datetime
from typing import Dict, Any, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

class IntegrationTester:
    def __init__(self):
        self.session = requests.Session()
        self.results = []
        self.current_user = None
        
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        timestamp = datetime.now().strftime("%H:%M:%S")
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": timestamp
        }
        self.results.append(result)
        print(f"[{timestamp}] {status} {test_name}")
        if details:
            print(f"    {details}")
    
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        try:
            response = self.session.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                data = response.json()
                self.log_test("Health Check", True, f"Status: {data.get('status')}")
                return True
            else:
                self.log_test("Health Check", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Health Check", False, str(e))
            return False
    
    def test_api_info(self) -> bool:
        """–¢–µ—Å—Ç API info —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        try:
            response = self.session.get(f"{BASE_URL}/api/info")
            if response.status_code == 200:
                data = response.json()
                endpoints = data.get('endpoints', {})
                self.log_test("API Info", True, f"Version: {data.get('version')}, Endpoints: {len(endpoints)}")
                return True
            else:
                self.log_test("API Info", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("API Info", False, str(e))
            return False
    
    def test_telegram_verification(self) -> bool:
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
            telegram_data = {
                "user": {
                    "id": 123456789,
                    "first_name": "Test",
                    "last_name": "User",
                    "username": "testuser",
                    "photo_url": "https://t.me/i/userpic/320/testuser.jpg",
                    "auth_date": int(time.time()),
                    "hash": "test_hash"
                },
                "auth_date": int(time.time()),
                "hash": "test_hash",
                "initData": "test_init_data"
            }
            
            response = self.session.post(
                f"{API_BASE}/auth/telegram/verify",
                json=telegram_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code in [200, 400, 401]:  # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                data = response.json()
                exists = data.get('exists', False)
                self.log_test("Telegram Verification", True, f"User exists: {exists}")
                return True
            else:
                self.log_test("Telegram Verification", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Telegram Verification", False, str(e))
            return False
    
    def test_profile_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            response = self.session.get(f"{API_BASE}/profile")
            
            if response.status_code in [200, 401]:  # 401 - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Profile GET", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Profile GET", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Profile GET", False, str(e))
            return False
    
    def test_upload_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_file_content = b"test image content"
            
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
            files = {'file': ('test_avatar.jpg', test_file_content, 'image/jpeg')}
            response = self.session.post(f"{API_BASE}/upload/avatar", files=files)
            
            if response.status_code in [200, 401]:  # 401 - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Upload Avatar", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Upload Avatar", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Upload Avatar", False, str(e))
            return False
    
    def test_rides_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ–µ–∑–¥–æ–∫"""
        try:
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫
            params = {
                "from_location": "–ú–æ—Å–∫–≤–∞",
                "to_location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "date_from": "2024-01-15"
            }
            response = self.session.get(f"{API_BASE}/rides/search", params=params)
            
            if response.status_code in [200, 401]:  # 401 - —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Rides Search", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Rides Search", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Rides Search", False, str(e))
            return False
    
    def test_chat_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —á–∞—Ç–∞"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
            response = self.session.get(f"{API_BASE}/chat/1/messages")
            
            if response.status_code in [200, 401, 404]:  # 404 - —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                self.log_test("Chat Messages", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Chat Messages", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Chat Messages", False, str(e))
            return False
    
    def test_rating_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = self.session.get(f"{API_BASE}/rating/user/1")
            
            if response.status_code in [200, 401, 404]:  # 404 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                self.log_test("User Ratings", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("User Ratings", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("User Ratings", False, str(e))
            return False
    
    def test_notifications_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            response = self.session.get(f"{API_BASE}/notifications")
            
            if response.status_code in [200, 401]:
                self.log_test("Notifications", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Notifications", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Notifications", False, str(e))
            return False
    
    def test_moderation_endpoints(self) -> bool:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
            response = self.session.get(f"{API_BASE}/moderation/reports")
            
            if response.status_code in [200, 401]:
                self.log_test("Moderation Reports", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test("Moderation Reports", False, f"Status code: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Moderation Reports", False, str(e))
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞")
        print("=" * 60)
        
        tests = [
            ("Health Check", self.test_health_check),
            ("API Info", self.test_api_info),
            ("Telegram Verification", self.test_telegram_verification),
            ("Profile Endpoints", self.test_profile_endpoints),
            ("Upload Endpoints", self.test_upload_endpoints),
            ("Rides Endpoints", self.test_rides_endpoints),
            ("Chat Endpoints", self.test_chat_endpoints),
            ("Rating Endpoints", self.test_rating_endpoints),
            ("Notifications Endpoints", self.test_notifications_endpoints),
            ("Moderation Endpoints", self.test_moderation_endpoints),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                self.log_test(test_name, False, f"Exception: {str(e)}")
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        success_rate = (passed / total) * 100
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({success_rate:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
        for result in self.results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']} - {result['details']}")
        
        return {
            "total_tests": total,
            "passed_tests": passed,
            "success_rate": success_rate,
            "results": self.results
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_integration.py

–û–ø—Ü–∏–∏:
    --help    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç:
    - Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç
    - API info —ç–Ω–¥–ø–æ–∏–Ω—Ç
    - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Telegram
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–æ–µ–∑–¥–æ–∫
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–∞—Ç–∞
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        """)
        return
    
    tester = IntegrationTester()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"integration_test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if results['success_rate'] >= 80:
        print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        sys.exit(0)
    elif results['success_rate'] >= 60:
        print("‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        sys.exit(1)
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!")
        sys.exit(2)

if __name__ == "__main__":
    main() 