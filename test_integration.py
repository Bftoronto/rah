#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API, —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

import asyncio
import json
import requests
import pytest
from datetime import datetime, timedelta
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
BASE_URL = "https://pax-backend-2gng.onrender.com"
TEST_USER_DATA = {
    "id": 123456789,
    "first_name": "Test",
    "last_name": "User",
    "username": "testuser",
    "photo_url": "https://t.me/i/userpic/320/test.jpg",
    "auth_date": int(datetime.now().timestamp()),
    "hash": "test_hash_123"
}

class IntegrationTestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.session = requests.Session()
        self.access_token = None
        self.refresh_token = None
        self.test_user_id = None
    
    def log_test(self, test_name: str, status: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        status_icon = "‚úÖ" if status == "PASS" else "‚ùå"
        print(f"[{timestamp}] {status_icon} {test_name}: {details}")
    
    def test_health_check(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            response = self.session.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                data = response.json()
                self.log_test("Health Check", "PASS", f"API –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}")
                return True
            else:
                self.log_test("Health Check", "FAIL", f"HTTP {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Health Check", "FAIL", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False
    
    def test_telegram_auth_schema(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram"""
        try:
            auth_data = {
                "user": TEST_USER_DATA,
                "auth_date": TEST_USER_DATA["auth_date"],
                "hash": TEST_USER_DATA["hash"]
            }
            
            response = self.session.post(
                f"{BASE_URL}/api/auth/telegram/verify",
                json=auth_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code in [200, 400]:  # 400 - –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                self.log_test("Telegram Auth Schema", "PASS", "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                return True
            else:
                self.log_test("Telegram Auth Schema", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Telegram Auth Schema", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_rides_search_api(self) -> bool:
        """–¢–µ—Å—Ç API –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫"""
        try:
            params = {
                "from_location": "–ú–æ—Å–∫–≤–∞",
                "to_location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                "date_from": datetime.now().isoformat(),
                "limit": 10
            }
            
            response = self.session.get(
                f"{BASE_URL}/api/rides/search",
                params=params
            )
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    self.log_test("Rides Search API", "PASS", f"–ù–∞–π–¥–µ–Ω–æ {len(data)} –ø–æ–µ–∑–¥–æ–∫")
                    return True
                else:
                    self.log_test("Rides Search API", "FAIL", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    return False
            else:
                self.log_test("Rides Search API", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Rides Search API", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_file_upload_schema(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_file_content = b"test image content"
            
            files = {"file": ("test.jpg", test_file_content, "image/jpeg")}
            data = {"file_type": "avatar"}
            
            response = self.session.post(
                f"{BASE_URL}/api/upload/",
                files=files,
                data=data
            )
            
            # –û–∂–∏–¥–∞–µ–º 401 (–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) –∏–ª–∏ 400 (–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            if response.status_code in [401, 400]:
                self.log_test("File Upload Schema", "PASS", "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                return True
            else:
                self.log_test("File Upload Schema", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("File Upload Schema", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_chat_api_schema(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã —á–∞—Ç–∞"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            response = self.session.get(f"{BASE_URL}/api/chat/")
            
            if response.status_code == 401:  # –û–∂–∏–¥–∞–µ–º 401 –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Chat API Schema", "PASS", "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                return True
            else:
                self.log_test("Chat API Schema", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Chat API Schema", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_rating_api_schema(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            response = self.session.get(f"{BASE_URL}/api/rating/statistics")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict):
                    self.log_test("Rating API Schema", "PASS", "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                    return True
                else:
                    self.log_test("Rating API Schema", "FAIL", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    return False
            else:
                self.log_test("Rating API Schema", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Rating API Schema", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_notifications_api_schema(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ö–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            response = self.session.get(f"{BASE_URL}/api/notifications/status")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict):
                    self.log_test("Notifications API Schema", "PASS", "–°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞")
                    return True
                else:
                    self.log_test("Notifications API Schema", "FAIL", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    return False
            else:
                self.log_test("Notifications API Schema", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Notifications API Schema", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            # –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            response = self.session.get(f"{BASE_URL}/api/nonexistent")
            
            if response.status_code == 404:
                self.log_test("Error Handling", "PASS", "404 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                self.log_test("Error Handling", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Error Handling", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_cors_headers(self) -> bool:
        """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            response = self.session.options(f"{BASE_URL}/api/auth/")
            
            if response.status_code == 200:
                cors_headers = response.headers.get("Access-Control-Allow-Origin")
                if cors_headers:
                    self.log_test("CORS Headers", "PASS", "CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    return True
                else:
                    self.log_test("CORS Headers", "FAIL", "CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    return False
            else:
                self.log_test("CORS Headers", "FAIL", f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("CORS Headers", "FAIL", f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîç –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 60)
        
        tests = [
            ("Health Check", self.test_health_check),
            ("Telegram Auth Schema", self.test_telegram_auth_schema),
            ("Rides Search API", self.test_rides_search_api),
            ("File Upload Schema", self.test_file_upload_schema),
            ("Chat API Schema", self.test_chat_api_schema),
            ("Rating API Schema", self.test_rating_api_schema),
            ("Notifications API Schema", self.test_notifications_api_schema),
            ("Error Handling", self.test_error_handling),
            ("CORS Headers", self.test_cors_headers)
        ]
        
        results = {}
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                results[test_name] = result
                if result:
                    passed += 1
            except Exception as e:
                self.log_test(test_name, "FAIL", f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
                results[test_name] = False
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í: {passed}/{total} –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("=" * 60)
        
        success_rate = (passed / total) * 100
        print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        elif success_rate >= 60:
            print("‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        else:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        return {
            "total_tests": total,
            "passed_tests": passed,
            "success_rate": success_rate,
            "results": results
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_suite = IntegrationTestSuite()
    results = test_suite.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("integration_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ integration_test_results.json")
    
    return results["success_rate"] >= 60

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 