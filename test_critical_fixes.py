#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
"""

import sys
import os
import json
import requests
from datetime import datetime, date
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±—ç–∫–µ–Ω–¥—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_user_schema_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        from backend.app.schemas.user import UserRead
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_data = {
            'id': 1,
            'telegram_id': '123456789',
            'phone': '79001234567',
            'full_name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            'birth_date': date(1990, 1, 1),
            'city': '–ú–æ—Å–∫–≤–∞',
            'avatar_url': 'https://example.com/avatar.jpg',
            'is_active': True,
            'is_verified': True,
            'is_driver': False,
            'privacy_policy_version': '1.1',
            'privacy_policy_accepted': True,
            'privacy_policy_accepted_at': datetime.now(),
            'car_brand': 'Toyota',
            'car_model': 'Camry',
            'car_year': 2020,
            'car_color': '–ë–µ–ª—ã–π',
            'driver_license_number': '1234567890',
            'driver_license_photo_url': 'https://example.com/license.jpg',
            'car_photo_url': 'https://example.com/car.jpg',
            'created_at': datetime.now(),
            'updated_at': datetime.now(),
            'average_rating': 4.5,
            'total_rides': 10,
            'cancelled_rides': 1
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UserRead
        user_read = UserRead(**test_user_data)
        user_dict = user_read.model_dump()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump –≤–º–µ—Å—Ç–æ dict
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        required_fields = ['name', 'avatar', 'balance', 'reviews', 'verified', 'car', 'rating']
        missing_fields = []
        
        for field in required_fields:
            if field not in user_dict:
                missing_fields.append(field)
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {missing_fields}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        assert user_dict['name'] == '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', f"name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', –ø–æ–ª—É—á–µ–Ω–æ: {user_dict['name']}"
        assert user_dict['avatar'] == 'https://example.com/avatar.jpg', f"avatar –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL, –ø–æ–ª—É—á–µ–Ω–æ: {user_dict['avatar']}"
        assert user_dict['balance'] == 500, f"balance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 500, –ø–æ–ª—É—á–µ–Ω–æ: {user_dict['balance']}"
        assert user_dict['reviews'] == 0, f"reviews –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, –ø–æ–ª—É—á–µ–Ω–æ: {user_dict['reviews']}"
        assert user_dict['rating'] == 4, f"rating –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4, –ø–æ–ª—É—á–µ–Ω–æ: {user_dict['rating']}"
        assert isinstance(user_dict['verified'], dict), f"verified –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict, –ø–æ–ª—É—á–µ–Ω–æ: {type(user_dict['verified'])}"
        assert isinstance(user_dict['car'], dict), f"car –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å dict, –ø–æ–ª—É—á–µ–Ω–æ: {type(user_dict['car'])}"
        
        print("‚úÖ –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def test_telegram_data_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from backend.app.schemas.telegram import TelegramAuthRequest, TelegramUserData
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        frontend_data = {
            'user': {
                'id': 123456789,
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–ò–≤–∞–Ω–æ–≤',
                'username': 'ivan_ivanov',
                'photo_url': 'https://t.me/i/userpic/320/ivan_ivanov.jpg',
                'auth_date': int(datetime.now().timestamp()),
                'hash': 'test_hash_123'
            },
            'auth_date': int(datetime.now().timestamp()),
            'hash': 'test_hash_123',
            'initData': 'test_init_data',
            'query_id': 'test_query_id',
            'start_param': 'test_start_param'
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        auth_request = TelegramAuthRequest(**frontend_data)
        user_data = auth_request.user.model_dump()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump –≤–º–µ—Å—Ç–æ dict
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        assert user_data['id'] == 123456789, f"ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 123456789, –ø–æ–ª—É—á–µ–Ω–æ: {user_data['id']}"
        assert user_data['first_name'] == '–ò–≤–∞–Ω', f"first_name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ò–≤–∞–Ω', –ø–æ–ª—É—á–µ–Ω–æ: {user_data['first_name']}"
        assert user_data['last_name'] == '–ò–≤–∞–Ω–æ–≤', f"last_name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–ò–≤–∞–Ω–æ–≤', –ø–æ–ª—É—á–µ–Ω–æ: {user_data['last_name']}"
        assert user_data['username'] == 'ivan_ivanov', f"username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'ivan_ivanov', –ø–æ–ª—É—á–µ–Ω–æ: {user_data['username']}"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Telegram –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    # –ë–∞–∑–æ–≤—ã–π URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    base_url = "http://localhost:8000"
    
    try:
        # –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/auth/me (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401 –±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
        response = requests.get(f"{base_url}/api/auth/me", timeout=5)
        assert response.status_code == 401, f"–≠–Ω–¥–ø–æ–∏–Ω—Ç /api/auth/me –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 401, –ø–æ–ª—É—á–µ–Ω–æ: {response.status_code}"
        
        print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def test_frontend_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ api.js
        api_js_path = "frontend/assets/js/api.js"
        if not os.path.exists(api_js_path):
            print(f"‚ùå –§–∞–π–ª {api_js_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        with open(api_js_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_methods = [
            'getCurrentUser()',
            'verifyTelegramUser(telegramData)',
            'login(telegramData)'
        ]
        
        missing_methods = []
        for method in required_methods:
            if method not in content:
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã –≤ api.js: {missing_methods}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Telegram –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ—Ç–æ–¥–∞—Ö
        if 'user: {' not in content or 'auth_date:' not in content:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Telegram –¥–∞–Ω–Ω—ã—Ö –≤ api.js")
            return False
        
        print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –±—ç–∫–µ–Ω–¥–æ–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return False

def test_upload_wrong_content_type():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type (–æ–∂–∏–¥–∞–µ–º 415)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type...")
    import requests
    base_url = "http://localhost:8000"
    try:
        files = {'file': ('test.txt', b'hello', 'text/plain')}
        data = {'file_type': 'avatar'}
        # –Ø–≤–Ω–æ —Å—Ç–∞–≤–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type
        headers = {'Content-Type': 'application/json'}
        response = requests.post(f"{base_url}/api/upload/", data=data, files=files, headers=headers)
        if response.status_code == 415:
            print("‚úÖ upload_file –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 415 –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º Content-Type")
            return True
        else:
            print(f"‚ùå upload_file –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 415, –ø–æ–ª—É—á–µ–Ω–æ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å upload_file: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω

def test_websocket_url_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebSocket URL (snake_case user_id)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebSocket URL...")
    try:
        import importlib.util
        import sys
        ws_path = 'frontend/assets/js/websocket.js'
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id –≤ getWebSocketUrl
        with open(ws_path, 'r', encoding='utf-8') as f:
            content = f.read()
        if 'this.user_id' in content and '/ws/${this.user_id}' in content:
            print("‚úÖ WebSocket URL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç snake_case user_id")
            return True
        else:
            print("‚ùå WebSocket URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å snake_case user_id")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å WebSocket URL: {e}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
    print("=" * 50)
    
    tests = [
        test_user_schema_compatibility,
        test_telegram_data_structure,
        test_api_endpoints,
        test_frontend_compatibility,
        test_upload_wrong_content_type,
        test_websocket_url_generation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 