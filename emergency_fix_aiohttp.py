#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° AIOHTTP
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ ModuleNotFoundError: No module named 'aiohttp'
"""

import subprocess
import sys
import os
import requests
import json
from datetime import datetime

def log(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    log(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    return version

def install_aiohttp():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ aiohttp"""
    try:
        log("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é aiohttp...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "aiohttp==3.9.1"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            log("‚úÖ aiohttp —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ aiohttp: {result.stderr}")
            return False
    except Exception as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ aiohttp: {e}")
        return False

def verify_aiohttp_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ aiohttp"""
    try:
        import aiohttp
        log(f"‚úÖ aiohttp –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤–µ—Ä—Å–∏—è: {aiohttp.__version__}")
        return True
    except ImportError as e:
        log(f"‚ùå aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False

def check_backend_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞"""
    try:
        url = "https://pax-backend-2gng.onrender.com/health"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            log(f"‚úÖ –ë—ç–∫–µ–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
            return True
        else:
            log(f"‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞: {e}")
        return False

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import psycopg2
        from urllib.parse import urlparse
        
        # –ü–∞—Ä—Å–∏–Ω–≥ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_url = "postgresql://paxmain_user:IUwzoIuzbKG9RuruiHSxBFTllTwaK4DN@dpg-d1lu8jnfte5s73dv6780-a/paxmain"
        parsed = urlparse(db_url)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(
            host=parsed.hostname,
            port=parsed.port or 5432,
            database=parsed.path[1:],
            user=parsed.username,
            password=parsed.password
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    try:
        bot_token = "8187393599:AAEudOluahmhNJixt_hW8mvWjWC0eh1YIlA"
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                bot_info = data["result"]
                log(f"‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info['username']}")
                return True
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {data}")
                return False
        else:
            log(f"‚ùå Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {e}")
        return False

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    try:
        url = "https://frabjous-florentine-c506b0.netlify.app"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            log("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            log(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return False

def update_requirements():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt"""
    try:
        requirements_path = "backend/requirements.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ aiohttp –≤ requirements
        with open(requirements_path, 'r') as f:
            content = f.read()
        
        if 'aiohttp' not in content:
            log("–î–æ–±–∞–≤–ª—è—é aiohttp –≤ requirements.txt...")
            with open(requirements_path, 'a') as f:
                f.write("aiohttp==3.9.1\n")
            log("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            log("‚úÖ aiohttp —É–∂–µ –µ—Å—Ç—å –≤ requirements.txt")
        
        return True
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    log("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° AIOHTTP")
    log("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    check_python_version()
    
    # 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ aiohttp
    if not install_aiohttp():
        log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiohttp")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if not verify_aiohttp_installation():
        log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt
    update_requirements()
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    log("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´")
    log("-" * 40)
    
    backend_ok = check_backend_health()
    db_ok = check_database_connection()
    bot_ok = check_telegram_bot()
    frontend_ok = check_frontend()
    
    # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    log("-" * 40)
    log(f"‚úÖ aiohttp: –£–°–¢–ê–ù–û–í–õ–ï–ù")
    log(f"{'‚úÖ' if backend_ok else '‚ùå'} –ë—ç–∫–µ–Ω–¥: {'–†–ê–ë–û–¢–ê–ï–¢' if backend_ok else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    log(f"{'‚úÖ' if db_ok else '‚ùå'} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ü–û–î–ö–õ–Æ–ß–ï–ù–ê' if db_ok else '–ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê'}")
    log(f"{'‚úÖ' if bot_ok else '‚ùå'} Telegram –±–æ—Ç: {'–†–ê–ë–û–¢–ê–ï–¢' if bot_ok else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    log(f"{'‚úÖ' if frontend_ok else '‚ùå'} –§—Ä–æ–Ω—Ç–µ–Ω–¥: {'–î–û–°–¢–£–ü–ï–ù' if frontend_ok else '–ù–ï –î–û–°–¢–£–ü–ï–ù'}")
    
    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    log("-" * 40)
    
    if not backend_ok:
        log("üîß –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—ç–∫–µ–Ω–¥ –Ω–∞ Render")
        log("   - –ó–∞–π–¥–∏—Ç–µ –≤ Render Dashboard")
        log("   - –ù–∞–π–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å pax-backend-2gng")
        log("   - –ù–∞–∂–º–∏—Ç–µ 'Manual Deploy'")
    
    if not db_ok:
        log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        log("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–∞")
        log("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL")
    
    if not bot_ok:
        log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
        log("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        log("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    
    if not frontend_ok:
        log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        log("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Netlify —Ä–∞–±–æ—Ç–∞–µ—Ç")
        log("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞")
    
    # 8. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if backend_ok and db_ok and bot_ok and frontend_ok:
        log("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        log("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä—É")
        return True
    else:
        log("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 