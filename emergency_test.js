#!/usr/bin/env node

/**
 * üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
 */

console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø');
console.log('=================================');

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
function checkFile(filePath, description) {
    console.log(`\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${description}:`);
    console.log(`   –§–∞–π–ª: ${filePath}`);
    
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        const issues = [];
        
        // 1. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ default exports
        const defaultExports = content.match(/export\s+{\s*\w+\s+as\s+default\s*}/g) || [];
        if (defaultExports.length > 1) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${defaultExports.length} default exports`);
        }
        
        // 2. –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç default + named
        const problematicImports = content.match(/import\s+\w+\s*,\s*{\s*\w+\s*}\s+from/g) || [];
        if (problematicImports.length > 0) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${problematicImports.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤`);
        }
        
        // 3. Star exports –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        const starExports = content.match(/export\s+\*\s+from/g) || [];
        const namedExports = content.match(/export\s+{\s*\w+.*}/g) || [];
        if (starExports.length > 0 && namedExports.length > 0) {
            issues.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç star exports –∏ named exports');
        }
        
        if (issues.length === 0) {
            console.log('   ‚úÖ –§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
            return true;
        } else {
            console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
            issues.forEach(issue => console.log(`      - ${issue}`));
            return false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
const criticalFiles = [
    {
        path: 'frontend/assets/js/router.js',
        description: 'Router.js (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π)'
    },
    {
        path: 'frontend/assets/js/screens/index.js',
        description: 'Screens/index.js (—ç–∫—Å–ø–æ—Ä—Ç—ã —ç–∫—Ä–∞–Ω–æ–≤)'
    },
    {
        path: 'frontend/assets/js/screens/registration.js',
        description: 'Registration.js (—ç–∫—Ä–∞–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)'
    },
    {
        path: 'frontend/assets/js/app.js',
        description: 'App.js (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)'
    }
];

let allPassed = true;

criticalFiles.forEach(file => {
    const passed = checkFile(file.path, file.description);
    if (!passed) {
        allPassed = false;
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
const jsFiles = criticalFiles.map(f => f.path);
let syntaxOK = true;

jsFiles.forEach(file => {
    try {
        const { execSync } = require('child_process');
        execSync(`node -c "${file}"`, { stdio: 'pipe' });
        console.log(`   ‚úÖ ${file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
    } catch (error) {
        console.log(`   ‚ùå ${file} - —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞`);
        syntaxOK = false;
        allPassed = false;
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
console.log('\nüéØ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ router.js –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç screens –∫–∞–∫ default
const routerContent = fs.readFileSync('frontend/assets/js/router.js', 'utf8');
const hasProblematicImport = routerContent.includes('import screens,');
if (hasProblematicImport) {
    console.log('   ‚ùå –í router.js –æ—Å—Ç–∞–ª—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç');
    allPassed = false;
} else {
    console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ router.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ screens/index.js –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç screens as default
const screensContent = fs.readFileSync('frontend/assets/js/screens/index.js', 'utf8');
const hasProblematicExport = screensContent.includes('export { screens as default }');
if (hasProblematicExport) {
    console.log('   ‚ùå –í screens/index.js –æ—Å—Ç–∞–ª—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç');
    allPassed = false;
} else {
    console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ screens/index.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê:');
console.log('================================');

if (allPassed) {
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´');
    console.log('üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –£–°–¢–†–ê–ù–ï–ù–ê');
    console.log('');
    console.log('üöÄ –ü–õ–ê–ù –î–ê–õ–¨–ù–ï–ô–®–ò–• –î–ï–ô–°–¢–í–ò–ô:');
    console.log('1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ deploy –Ω–∞ Netlify');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫');
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç');
    console.log('');
    console.log('üìà –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('- –ü–æ–ª–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞');
    console.log('- –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö');
} else {
    console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´');
    console.log('üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï');
    console.log('');
    console.log('‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–ù–ò–ú–ê–ù–ò–ï:');
    console.log('–°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ');
}

console.log('\n‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', new Date().toLocaleTimeString());
console.log('üí° –°–æ–∑–¥–∞–Ω–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
